{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#welcome-to-the-portmaster-wiki","title":"Welcome to the PortMaster Wiki!","text":"<p>PortMaster is a powerful, community-driven platform that simplifies the process of managing game ports on Linux handheld devices. Designed for retro gaming enthusiasts, it offers an easy way to download, install, and update PC game ports on custom firmware setups. Whether you're playing indie classics or commercial titles, PortMaster ensures smooth compatibility for a wide range of games.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Game Port Management: Easily install and update game ports, both free and commercial titles.</li> <li>Multi-Device Support: Compatible with a variety of Linux handheld devices like AmberELEC, ArkOS, and muOS.</li> <li>User-Friendly Interface: Simple graphical interface (GUI) to handle installations and updates with ease.</li> <li>Community Contributions: Actively encourages community members to suggest new ports and improve the platform.</li> <li>Automated Library Management: Automatically handles necessary libraries for seamless gameplay, preventing system conflicts.</li> </ul>"},{"location":"#preview","title":"Preview","text":""},{"location":"#supported-games","title":"Supported Games","text":"<p>PortMaster hosts a variety of games, from indie gems to classic titles. </p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Ensure your device is running a compatible custom firmware (CFW), such as AmberELEC, ArkOS, or muOS. PortMaster is intended for Linux-based handheld systems. Installation Steps</p>"},{"location":"#installation-steps","title":"Installation Steps","text":"<p>Most supported CFWs include PortMaster by default. If not, you can install it manually using a simple installer script. For complete instructions, visit the  Installation page!</p>"},{"location":"#community","title":"Community","text":"<p>The PortMaster community thrives on collaboration. Join us on Discord to share your thoughts, contribute to development, or just talk about games: \u00a0 Discord</p>"},{"location":"#licenses","title":"Licenses","text":"<p>PortMaster is open-source software, and its components are released under their respective licenses. The platform is built on contributions from the open-source community, and special thanks go out to those who have made it possible.</p>"},{"location":"#credits","title":"Credits","text":"<p>PortMaster is a community-driven project, supported by passionate developers and contributors from around the world. Special thanks to all the developers who continue to make handheld gaming a reality, as well as the open-source community for their ongoing support and contributions.</p>"},{"location":"faq/","title":"Frequenty Asked Questions","text":""},{"location":"faq/#what-is-portmaster","title":"What is PortMaster?","text":"<p>PortMaster is a simple GUI tool designed to facilitate the downloading and installation of game ports for linux handheld devices. </p> <p>One of the goals of PortMaster is to not install or upgrade any existing OS libraries for any ports. Any of the ports that need a particular non-standard library are maintained within the ports' folder and made available specifically to that port during execution.</p> <p>Through the volunteer contributions of the mighty Port Navigators, most of the the ports available through PortMaster have been configured to launch with proper controls for the various devices that are supported.</p>"},{"location":"faq/#what-devices-are-supported","title":"What Devices are supported?","text":"<p>(Currently Outdated) The full list of supported devices can be found here</p>"},{"location":"faq/#how-can-i-install-portmaster","title":"How can I install PortMaster?","text":"<p>A guide to install Portmaster can be found here</p>"},{"location":"faq/#do-i-have-to-use-portmaster-to-install-ports","title":"Do I have to use PortMaster to install ports?","text":"<p>For the best experience you should download and install the Port trough the PortMaster Application. This ensures that the installed Port has the correct permissions aswell as the correct metadata. </p> <p>If you have a device without wifi you can simply go to the PortMaster repo, https://portmaster.games/games.html, find the title of the port you want, download it and copy the zip file into the PortMaster Autoinstall folder. Then you just run the PortMaster Application and PortMaster will install the Port for you.</p> <p>Here are the locations for the autoinstall folder for the </p> <ul> <li>AmberELEC, ROCKNIX, uOS, Jelos <code>/roms/ports/PortMaster/autoinstall/</code></li> <li>muOS <code>/mmc/MUOS/PortMaster/autoinstall/</code></li> <li>ArkOS <code>/roms/tools/PortMaster/autoinstall/</code></li> <li>Knulli <code>/userdata/system/.local/share/PortMaster/autoinstall</code></li> </ul> <p>If that does not work you can also unzip the contents of the port into the ports folders of each cfw, note that this may break the port and ports may no longer start.</p> <ul> <li>AmberELEC, ROCKNIX, uOS, Jelos <code>/roms/ports/</code></li> <li>muOS <code>/mmc/ports/ for the folders and /mnt/mmc/ROMS/Ports/ for the .sh files</code></li> <li>ArkOS <code>/roms/tools/PortMaster/autoinstall/</code></li> <li>Knulli <code>/userdata/system/.local/share/PortMaster/autoinstall</code></li> </ul>"},{"location":"faq/#how-do-i-get-more-info-about-the-ports-in-portmaster-like-the-sources-used-and-additional-asset-needs-if-applicable","title":"How do I get more info about the ports in PortMaster like the sources used and additional asset needs if applicable?","text":"<p>You can find all Ports with included instructions on the PortMaster Wiki</p>"},{"location":"faq/#if-there-are-updates-to-ports-how-will-that-work","title":"If there are updates to Ports, how will that work?","text":"<p>Just run PortMaster and reinstall the port. You can also unzip the associated <code>.zip</code> for the port you want and unzip the contents of it to the ports folder. This should install the latest port related files if they've been updated in PortMaster. In most cases, it should not impact any existing game data you had to provide or existing saves unless the updated port made changes to the port backend that impacts previous saves.</p>"},{"location":"faq/#how-can-i-help-add-ports-to-portmaster","title":"How can I help add ports to PortMaster?","text":"<p>See our Contribute section on https://portmaster.games/ If you have any questions about the process not detailed in the documentation feel free to reach out on our Discord Server.</p>"},{"location":"faq/#how-can-i-run-my-port-via-ssh-to-troubleshoot-any-starting-issues","title":"How can I run my Port via ssh to troubleshoot any starting issues?","text":"<p>Download Putty: https://the.earth.li/~sgtatham/putty/latest/w64/putty.exe</p> <ul> <li>Start Putty</li> <li>Enter your Device IP</li> <li>Open</li> <li>Enter your ssh credentials</li> </ul> <p>-- Amberelec: root / amberelec --  ArkOS    : ark / ark  --  Jelos    : root / check under system settings - enter: <pre><code>cd /roms/ports/\n./WhateveryourgameIsCalled.sh\n</code></pre> You can then mark the output with your mouse and with ctrl + c / ctrl + v paste it into the ports-help channel on discord.</p>"},{"location":"contribute/developer-details/","title":"Developer Details","text":""},{"location":"contribute/developer-details/#portmaster-developer-license-permission-overview","title":"PortMaster Developer License &amp; Permission Overview","text":"<p>Each PortMaster package has all necessary permission and license files included.</p> <p>If you have any questions feel free to contact the PortMaster Crew in our discord or via contact@portmaster.games</p>"},{"location":"contribute/developer-details/#developer-asset-distribution-permissions","title":"Developer Asset Distribution Permissions:","text":"# Developer Link Engine Notes 1 Kultisti itch.io GMS 2 Gizmo itch.io GMS 3 Jon Topielski itch.io Godot 4 Bippinbits itch.io Godot Specific games only 5 Edgar Mendoza itch.io Godot 6 Cyfo itch.io Love2d 7 Juho itch.io Godot Missing license file 8 Harley Wilson itch.io GMS 9 Bananamanhatguy itch.io Godot 10 Team Bugulon itch.io GMS 11 Maybell itch.io GMS, Godot 12 ItsGeppy itch.io Godot Unclear license 13 ElgatoPanzon itch.io Godot 14 Blasin itch.io Love2d 15 LucasMegaStriker itch.io Godot 16 Vlambeer vlambeer.com GMS Specific games only 17 Aiwi itch.io Godot Specific games only 18 Nozomu itch.io Godot 19 Bucketfish itch.io Godot 20 Aarjvark Steam GMS Specific games only 21 Nabo itch.io GMS 22 Evan12811 itch.io Godot 23 Yousfi M Walid itch.io GMS 24 Steven Miller itch.io GMS 25 Pixel Archipel itch.io GMS, Godot 26 Yozoraki itch.io GMS 27 Suitgames suitgames.com GMS 28 Fred Wood itch.io GMS 29 Bagelcollie itch.io GMS, Godot 30 Red Screen Soft Red Screen Soft GMS 31 Case Portman itch.io GMS 32 Sunshine_Error itch.io GMS 33 Linky439 itch.io GMS 33 Justin Bohemier wixsite.com  GMS Missing license file"},{"location":"contribute/developer-details/#open-source-developer-permissions","title":"Open Source Developer Permissions:","text":"# Dev Name Link Engine Notes 1 HarmonyHoney GitHub Godot 2 Team Potato GitLab Godot 3 Wesley Werner GitHub Love2d 4 Jayden Sipe GitHub Godot 5 Joel Chrono GitHub Godot 6 Escada Games GitHub Godot 7 Levrault GitHub Godot 8 Joh-Dev GitHub Godot 9 Clarkjohn GitHub Godot 10 John Gabriel Bitbucket Godot 11 Tangram Games GitHub Love2d 12 TheJeme GitHub Love2d 13 FoppyGames GitHub Love2d 14 Dulsi GitHub Godot 15 Fuzzyzilla GitHub Godot 16 Yolwoocle GitHub Love2d 17 a327ex GitHub Love2d 18 Rafael Bordoni itch.io Godot 19 Flamendless GitHub Love2d 20 Joyrider GitHub SDL 21 Locomalito locomalito.com GMS 22 ProfPotanildo itch.io Love2d"},{"location":"contribute/developer-details/#denied-do-not-contact-again","title":"DENIED, DO NOT CONTACT AGAIN:","text":"# Dev Name Link Notes 1 Securas itch.io Do not contact again"},{"location":"contribute/what-can-be-ported/","title":"What can be ported?","text":""},{"location":"contribute/engines/gamemaker-studio/","title":"GameMaker Studio","text":"<p>GameMaker Studio is a game development engine designed to simplify the creation of 2D games. It offers a drag-and-drop interface for beginners and a custom scripting language for advanced users. Developers can create game elements through an event-driven system, making the engine accessible without requiring extensive programming knowledge.</p> <p>While GameMaker supports multiple platforms, including Windows, macOS, Linux, Android, iOS, and major consoles like Nintendo Switch, PlayStation, and Xbox, its support for ARM-based Linux systems is extremely limited. As a result, GameMaker titles are not compatible with the handheld devices supported by PortMaster using conventional methods.</p>"},{"location":"contribute/engines/gamemaker-studio/#porting-methodology","title":"Porting Methodology","text":"<p>Gmloader and its successor, gmloader-next are GameMaker Studio compatibility layers for ARM-based Linux systems, developed by JohnnyOnFlame and contributors. These projects share a history and codebase to the PS Vita parallel project, YoYoLoader.</p> <p>Both gmloader and gmloader-next function as compatibility layers for <code>libyoyo.so</code>, the official GameMaker Studio Runner application for Android. They load the ARM executable into memory, resolve its imports with native functions, and apply necessary patches to ensure proper execution.</p> <p>By simulating a minimalist Android-like environment, these tools enable the native execution of GameMaker Studio-developed games on ARM-based Linux devices.</p> <p>For more details on gmloader\u2019s origin and deeper technical functionality, refer to the research documentation.</p>"},{"location":"contribute/engines/gamemaker-studio/#compatibility","title":"Compatibility","text":"<p>The theoretical compatibility across platforms is summarized in the table below:</p> Platform Bytecode Compiler YoYo Compiler (YYC) Android Yes Yes Windows Yes No Linux Yes No macOS Yes No <ul> <li>gmloader: Supports GMS versions 2022.x and earlier, compatible with ARMv7/armhf architectures.</li> <li>gmloader-next.armhf: Supports all GMS versions, works with ARMv7/armhf.</li> <li>gmloader-next.aarch64: Supports GMS version 2.2.1+, compatible with ARMv8/AARCH64.</li> </ul>"},{"location":"contribute/engines/gamemaker-studio/#what-is-yyc","title":"What is YYC?","text":"<p>YYC (YoYo Compiler) is a feature in GameMaker Studio that compiles game code directly into machine code. This process leads to:</p> <ul> <li>Faster execution speed.</li> <li>Enhanced security due to direct compilation.</li> <li>However, the compiled code is integrated tightly into the executable, reducing portability across different platforms.</li> </ul>"},{"location":"contribute/engines/gamemaker-studio/#determining-gms-version-and-compiler-type","title":"Determining GMS Version and Compiler Type","text":"<p>To determine whether a GameMaker game uses YYC or bytecode, follow these steps:</p> <ol> <li>Install UndertaleModTool from here.</li> <li>Extract game assets (e.g., <code>data.win</code>, <code>game.unx</code>, <code>game.ios</code>, or <code>game.droid</code>) from the APK using 7Zip.</li> <li>Open the extracted assets in UndertaleModTool. The tool will automatically detect if the game uses YYC or bytecode.</li> <li>Navigate to Data &gt; General Info to check the GameMaker version.</li> </ol> <p>If the game uses YYC, a warning will appear in UndertaleModTool.</p>"},{"location":"contribute/engines/gamemaker-studio/#steps-involved","title":"Steps Involved","text":"<p>Porting a GameMaker game to an ARM-based Linux device using gmloader involves several key steps. The following guide outlines the process for porting a game.</p>"},{"location":"contribute/engines/gamemaker-studio/#step-1-find-the-target-game","title":"Step 1: Find the Target Game","text":"<p>The first step is to select a GameMaker game to port. A variety of GameMaker-developed games can be found on the following platforms:</p> <ul> <li>Itch.io: Games made with GameMaker</li> <li>SteamDB: Steam games using GameMaker Studio</li> </ul> <p>Tags and filters can be used to narrow down the search. It is recommended to begin with free games, as most commercially successful portable games have already been ported.</p>"},{"location":"contribute/engines/gamemaker-studio/#step-2-extract-the-games-bytecode-file","title":"Step 2: Extract the Game\u2019s Bytecode File","text":"<p>After selecting the game, the next step is to locate its bytecode file. GameMaker games typically store their assets in files such as data.win, game.unx, game.ios, or game.droid.</p> <p>To extract and inspect these files:</p> <ol> <li>Download UndertaleModTool from here.</li> <li>Extract the game files from the APK or game folder.</li> <li>Open the bytecode file (e.g., data.win, game.unx, game.ios,or game.droid) with UndertaleModTool.</li> </ol>"},{"location":"contribute/engines/gamemaker-studio/#step-3-check-for-yyc-and-gamemaker-version","title":"Step 3: Check for YYC and GameMaker Version","text":"<p>Within UndertaleModTool, check if the game uses YYC (YoYo Compiler) or bytecode:</p> <ol> <li>Look for the YYC warning. If the game uses YYC, a warning will appear.</li> <li>Check the GameMaker version under Data &gt; General Info.</li> </ol> <p>Note: UndertaleModTool makes an educated guess regarding the version, so accuracy is not always guaranteed.</p>"},{"location":"contribute/engines/gamemaker-studio/#step-4-select-the-correct-wrapper","title":"Step 4: Select the Correct Wrapper","text":"<p>After confirming the GameMaker version and compiler type, the appropriate wrapper APK should be downloaded from the following repository:</p> <ul> <li>GameMaker Studio Wrappers: wrapper APKs</li> </ul> <p>Note: It is preferable to build a custom wrapper/APK for final packaging. This can be done by downloading the matching version of GameMaker Studio, setting up the Android export, and exporting an open-source example. After the first launch, the assets can be removed using the following command: <code>zip -d portname.port 'assets/*'</code>. For further details on the reasoning behind this packaging, refer to the documentation below.</p>"},{"location":"contribute/engines/gamemaker-studio/#step-5-rework-the-example-package-for-the-game","title":"Step 5: Rework the Example Package for the Game","text":"<p>After obtaining the correct wrapper, the example zip package must be reworked for the specific game. Depending on the version of GameMaker Studio (GMS) used, choose between the following:</p> <ul> <li>gmloader (deprecated unless necessary)</li> <li>gmloadernext.aarch64 (recommended for GMS 2.2.1+ on ARMv8)</li> <li>gmloadernext.armhf (recommended for GMS 2.2.1- on ARMv7)</li> </ul> <p>It is crucial to ensure that the selected wrapper/APK includes the appropriate, matching, ARMv7 or ARMv8 Android libraries.</p> <p>By following these steps, a GameMaker game can be ported to an ARM-based Linux device using gmloader. Some games may require additional troubleshooting or configuration to run properly on the target device.</p>"},{"location":"contribute/engines/gamemaker-studio/#packaging","title":"Packaging","text":""},{"location":"contribute/engines/gamemaker-studio/#gmloader-port-file-structure","title":"GMLoader Port File Structure","text":"<pre><code>- Portname.sh\n- portname/\n    - lib/\n        - armv8a \n        - armv7a\n        - libopenal.so.1\n        - libzip.so.5\n        - libcrypto.so.1\n    - assets/\n        - .gitkeep\n    - saves/\n        - .gitkeep\n    - gmloader.json\n    - patches/\n        - patchscript \n    - portname.gptk\n    - portname.port\n</code></pre> <ul> <li> <p>lib folder     The <code>lib</code> folder within the runtime squashfs houses Android AOSP libraries, taken from a prebuilt image provided by Google. This folder is named <code>lib</code> because these are native Android libraries, following the file path structure used in Android. The <code>libs.${DEVICE_ARCH}</code> folder contains libraries native to either <code>aarch64</code> or <code>armhf</code>. GMLoader-Next requires <code>libcrypto</code>, <code>libopenal</code>, and <code>libzip</code> at a minimum to function.</p> </li> <li> <p>licenses folder     The <code>licenses</code> folder contains text and markdown files that outline the license agreements for each library and binary used in GMLoader.</p> </li> <li> <p>assets folder     This folder is where the end users place their game data. Typically, users will copy everything from their Steam or GOG installation folder, or unzip an archive from Itch.io into this folder. Once the <code>patchscript</code> completes on the first run, this folder may be removed.</p> </li> <li> <p>saves folder     This folder is used to store GameMaker games\u2019 save data. While the folder can be renamed, it is typically referred to as <code>saves</code>.</p> </li> <li> <p>gmloader.json     This JSON file contains configuration options for GMLoader-Next on a per-port basis. It is configurable and can be named <code>portname.json</code>.</p> <p>{     \"save_dir\" : \"saves\",     \"apk_path\" : \"my_game.port\",     \"show_cursor\" : false,     \"disable_controller\" : false,     \"force_platform\" : \"os_windows\" }</p> </li> <li> <p>patchscript     This is a bash script that runs on the first boot via the PortMaster Patcher program. The <code>.sh</code> file extension is avoided to prevent interference with PortMaster scripts. An example of the script can be found here.</p> </li> <li> <p>portname.gptk     If the GpToKeyB tool is used in the port, this file is likely included. Even if native gamepad controls are present, it is still advisable to include an empty <code>portname.gptk</code> file for debugging.</p> <p>back = \\\" start = \\\" up = \\\" down = \\\" left = \\\" right = \\\" a = \\\" b = \\\" x = \\\" y = \\\" l1 = \\\" l2 = \\\" l3 = \\\" r1 = \\\" r2 = \\\" r3 = \\\" left_analog_up = \\\" left_analog_down = \\\" left_analog_left = \\\" left_analog_right = \\\" right_analog_up = \\\" right_analog_down = \\\"  right_analog_left = \\\" right_analog_right = \\\"</p> </li> <li> <p>portname.port     This is an archive file structured like an APK file but without any Android-specific references. Upon opening, it will contain a <code>lib</code> folder with the GameMaker Studio runtime file and, if the port has been packed, an <code>assets</code> folder containing all the game data previously stored in the <code>portname/assets</code> folder.</p> </li> </ul> <p>Note: Game Maker Studio has listed two end-user license agreements on their website for their runtimes: the free agreement, and the professional agreement. Both list the following clause:</p> <p>This licence grants you the right to distribute the runtime portion of GameMaker in executable code format only as an integrated and inseparable part of your content to third parties to whom you license such content, subject in each case to your full compliance with the GameMaker Terms and payment of all applicable fees.</p> <p>In order to adhere to the EULA, we execute a good-faith practice by bundling game data with the runtime inside the <code>portname.port</code> archive.</p>"},{"location":"contribute/engines/gamemaker-studio/#patching-and-known-bugs","title":"Patching and known bugs","text":"<p>Sometimes ports need patches to function properly. Patches can be created with UTMT and In-house tools from Portmaster. Patches are usually deployed with an xdelta patch. When patching takes long it\u2019s recommended to use the PortMaster patching program to show progress.</p>"},{"location":"contribute/engines/gamemaker-studio/#pack-audio-into-wrapper","title":"Pack audio into wrapper:","text":"<p>Gmloader can have trouble loading in the audio when they are not packed into the wrapper/apk. The following example script will pack the OGG\u2019s to the wrapper/apk. This can also be adapted for games that use audiogroups.</p> <pre><code># Check for .ogg files and move to APK\n    if [ -n \"$(ls ./assets/*.ogg 2&gt;/dev/null)\" ]; then\n    zip -r -0 ./portname.port./assets/\n    echo \"Zipped contents to ./portname.port\"\nelse\n    echo \"No .ogg files found\"\nfi\n</code></pre>"},{"location":"contribute/engines/gamemaker-studio/#newtexturerepacker-utmt","title":"NewTextureRepacker (UTMT)","text":"<p>Script to export and repack textures developed by JohnnyOnFlame. Known to fix crashes caused by huge texturepages on Mali gpu\u2019s. Can reduce ram usage. Known to fix broken fonts on Mali gpu\u2019s.</p>"},{"location":"contribute/engines/gamemaker-studio/#bytecode-updowngraders-utmt","title":"Bytecode up/downgraders (UTMT)","text":"<p>This collection of scripts can up and downgrade bytecode versions. This can increase compatibility for GMS1 and GMS2 games.</p>"},{"location":"contribute/engines/gamemaker-studio/#gmtools-portmaster-in-house","title":"GMTools (PortMaster In-house)","text":"<p>Not all GameMaker games are the same when it comes to audio. Developers have a variety of audio options, from streaming external audio (like Undertale), to grouping audio files into <code>audiogroup.dat</code> files, to embedding audio files into the GMS data file. When audio files aren\u2019t streamed, they\u2019re loaded into memory at runtime. For low-mem handhelds, this can cause problems. GMTools analyzes all audiogroups and the data file and converts any <code>.wav</code> files it finds to <code>.ogg</code>, and can also compress audio to a specified bitrate. This can significantly reduce ram usage. For our usecase, audio quality isn\u2019t a big concern\u2013the handhelds use small speakers, after all.</p>"},{"location":"contribute/engines/gamemaker-studio/#patch-deployment-portmaster-tool","title":"Patch deployment (PortMaster tool)","text":"<p>If a GMS data file requires modifications, we need to then supply a method for the end-user to make use of the modifications without having to open up UTMT themselves. PortMaster strives to make ports as accessible and seamless as possible. XDelta3 both creates a patch file containing the differences between our two GMS data files, and applies patch files on-device during the first-time launch process for a port. This can be done with out xdelta binary inside the PortMaster controlfolder using the following:</p> <pre><code># Check if \"data.win\" exists and its MD5 checksum matches the specified value then apply patch\nif [ -f \"assets/data.win\" ]; then\n    checksum=$(md5sum \"assets/data.win\" | awk '{print $1}')\n    if [ \"$checksum\" = \"4b97bb2da8c515d787fe70aa03550ce5\" ]; then\n        $ESUDO $controlfolder/xdelta3 -d -s \"assets/data.win\" -f \"./patch/patch.xdelta3\" \"assets/game.droid\" &amp;&amp; \\\n        rm \"assets/data.win\"\n    fi\nfi\n</code></pre>"},{"location":"contribute/engines/gamemaker-studio/#tools-used","title":"Tools Used","text":"<p>PortMaster Engineers heavily rely on a few major tools that make GMS ports successful.</p> <ul> <li> <p>GameMaker Studio is the game engine in which these games are created. If a GMS game is open source, we can use GMS to build it ourselves and make it \u201cReady To Run\u201d. Example: Spelunky Classic HD.</p> </li> <li> <p>UndertaleModTool is a fantastic tool for both examining GameMaker files (<code>data.win</code>, <code>game.unx</code>, <code>game.ios</code> and <code>game.droid</code>) and modifying them via scripts.</p> </li> <li> <p>XDelta3 GUI is a gui version of xdelta3 that allows creating <code>.xdelta</code> patch files from differences in two files, used for GameMaker game modifications. A cli variant exists in PortMaster for applying these patches to legally obtained game files.</p> </li> <li> <p>GMTools, by PortMaster Crew Member Cyril aka kotzebuedog, is a python script that handles audio analysis and compression.</p> </li> <li> <p>GMLoader and GMLoader-Next are the compatibility binaries that translate android vm bytecode to linux vm. These two (used for armhf and aarch64 respectively) read an android GameMaker runner library <code>libyoyo.so</code> and translate it for linux execution.</p> </li> </ul>"},{"location":"contribute/engines/gamemaker-studio/#troubleshooting-performance-case-study","title":"Troubleshooting Performance (Case Study)","text":"<p>UFO50:</p> <p>When ram limitations are not the problem, it\u2019s time to dive deeper to find out why the game performs subpar. GameMaker uses rooms as a space to load content\u2013and will often contain preplaced static content such as tiles to avoid draw calls later. A game can have several different rooms, like one for the title screen, and then another for the game itself, etc. These rooms are loaded into memory wholesale, so if a room has massive dimensions (think 10,000 x 20,000), it might also have a massive amount of object instances. This means the entire game will chug while using that room. A good example of this is UFO 50\u2019s Ninpek game. If we open UFO 50 in UndertaleModTool and load <code>rm34_Ninpek</code>, we can instantly see why it\u2019s choppy and slow on small-arm handhelds: the room dimensions are 15,360 x 216. Ninpek is a sidescrolling game with a constantly moving camera, so it\u2019s natural for the developer to create a room like this to hold the content and flow. However, because the room contains so many instances, it slows to a crawl on low-power devices. There\u2019s not much we can do about a room like this, though, at least not without heavily tampering with the game\u2013which would essentially deviate the project from a simple compatibility patch and turn it into a complete mod.</p> <p>Isles of Sea and Sky:</p> <p>Isles of Sea and Sky is another fine example of performance troubleshooting. In IOSAS, entering specific areas will result in a huge framerate drop\u2013which instantly recovers as soon as the area is left. This again indicates a problem with rooms. IOSAS has a specific set of rooms called \u201cgod rooms\u201d that load a specific script that has to do with \u201cgod gem\u201d special effects. This special effect in question is a calculation loop for drawing lines to synchronize with gems rotating around a sprite. Calculations are already cpu-intensive tasks, so putting them into a loop that executes every frame is asking for low performance. This particular case was resolved by modifying the loop to retrieve variables from a file <code>pm-config.ini</code>, an ini file specially made for the port. Inside, the user can configure two variables: <code>Idol_SFX</code> and <code>FrameSkip</code>. If <code>Idol_SFX=1</code>, meaning the loop is allowed to execute, then <code>FrameSkip=x</code> will dictate when the loop will execute. Instead of executing every frame (<code>FrameSkip=0</code>), we can modify the value so the loop only executes every 20 or 30 frames. This results in a change: our low framerate is now a stutter, where the game \u201cpauses\u201d once every x frames when it performs the calculation step. This means the special effect also isn\u2019t perfectly aligned\u2013but it preserves the artistic effect somewhat while compensating for low cpu power.</p>"},{"location":"contribute/engines/gamemaker-studio/#compiling","title":"Compiling","text":"<p>Gmloader-next can be cross-compiled using the following steps. This is for development and contribution only, prebuilds are available in the example packages.</p> <pre><code># Clone the repository and all submodules\ngit clone https://github.com/JohnnyonFlame/gmloader-next --recursive\n\n# Build the project with desired target platform options  \nmake -f Makefile.gmloader ARCH=aarch64-linux-gnu\n\n# Example: Build using Debian Bullseye for older platforms  \nmake -f Makefile.gmloader \\\n  ARCH=aarch64-linux-gnu \\\n  LLVM_FILE=/usr/lib/llvm-11/lib/libclang-11.so.1 \\\n  LLVM_INC=/usr/aarch64-linux-gnu/include/c++/10/aarch64-linux-gnu \\\n  -j$(nproc)\n\n# Generate the libc dependencies  \npython3 scripts/generate_libc.py aarch64-linux-gnu \\\n  --llvm-includes /usr/aarch64-linux-gnu/include/c++/10/aarch64-linux-gnu \\\n  --llvm-library-file \"/usr/lib/llvm-11/lib/libclang-11.so.1\"\n\n# Deploy: Copy the lib redist folder to the application directory  \ncp -r lib_redist/ &lt;application_folder&gt;/\n\n# For more details, check the documentation  \nxdg-open https://github.com/JohnnyonFlame/gmloader-next\n</code></pre>"},{"location":"contribute/engines/gamemaker-studio/#conclusion","title":"Conclusion","text":"<p>By leveraging the tools and knowledge outlined in this guide, PortMaster Engineers enable modern GameMaker Studio games to run smoothly on small ARM-based handheld devices. The primary focus is on preserving the original game\u2019s features and feel, while optimizing it for different hardware. These optimizations help ensure that these iconic titles reach new platforms and players.</p> <p>Some of the notable games ported include:</p> <ul> <li>Undertale</li> <li>AM2R (Another Metroid 2 Remake)</li> <li>Forager</li> <li>UFO50</li> <li>Risk of Rain</li> </ul> <p>Through these efforts, we strive to make GameMaker Studio games accessible to a wider audience, ensuring they remain playable on a variety of devices.</p>"},{"location":"installation/installing-portmaster/","title":"Installing the GUI","text":"<p>Download the latest version of PortMaster.</p> <ul> <li>Install.PortMaster.sh - The base install of PortMaster.</li> <li>Install.Full.PortMaster.sh - The base install + all runtimes. (Recommended for offline devices)</li> </ul>"},{"location":"installation/installing-portmaster/#via-script","title":"Via Script","text":"<p>To install PortMaster via a simple Installation Script download either the Install.PortMaster.sh or Install.Full.PortMaster.sh (with all Runtimes already included) from the link above and place it in the appropriate folder for your CFW. After that simply execute the .sh from your Ports folder.</p> CFW Location AmberElec /roms/ports/ ArkOS /roms(or roms2)/ports/ ROCKNIX /roms/ports/ muOS /mnt/mmc/ROMS/Ports/ Knulli /userdata/roms/ports JELOS /roms/ports/ UnofficialOS /roms/ports/"},{"location":"installation/installing-portmaster/#other-cfw","title":"Other CFW","text":"<p>For the other CFW it is as simple as:</p> <ul> <li>Unzip PortMaster.zip and copy <code>PortMaster/</code> directory and all its contents into directory listed above.</li> <li>If you're using ArkOS, you will need to move the <code>/roms(or roms2)/tools/PortMaster/PortMaster.sh</code> up one directory to <code>/roms(or roms2)/tools/PortMaster.sh</code></li> </ul>"},{"location":"installation/installing-ports/","title":"Installing Ports","text":"<p>PortMaster is a simple GUI tool designed to download and install game ports for Linux handheld devices. Here's how you can install ports using PortMaster:</p>"},{"location":"installation/installing-ports/#best-experience-using-portmaster-application","title":"Best Experience: Using PortMaster Application","text":"<p>For the best experience, you should download and install ports through the PortMaster Application. This ensures that the installed port has the correct permissions and metadata.</p>"},{"location":"installation/installing-ports/#installation-process","title":"Installation Process","text":"<ol> <li>Open PortMaster Application</li> <li>Browse the available ports and select the one you want to install.</li> <li>Install the port \u2013 PortMaster handles all the details and ensures everything is set up correctly for your device.</li> </ol>"},{"location":"installation/installing-ports/#offline-installation","title":"Offline Installation","text":"<p>If your device doesn\u2019t have Wi-Fi or you can\u2019t use the PortMaster app, follow these steps for offline installation:</p>"},{"location":"installation/installing-ports/#1-download-the-port","title":"1. Download the Port","text":"<p>Go to the PortMaster repository and find the port you want to install. Download the <code>.zip</code> file for the desired port.</p>"},{"location":"installation/installing-ports/#2-place-the-port-in-the-autoinstall-folder","title":"2. Place the Port in the Autoinstall Folder","text":"<p>Copy the downloaded <code>.zip</code> file into the appropriate autoinstall folder for your device:</p> <ul> <li>AmberELEC, ROCKNIX, uOS, Jelos: <code>/roms/ports/PortMaster/autoinstall/</code></li> <li>muOS: <code>/mmc/MUOS/PortMaster/autoinstall/</code></li> <li>ArkOS: <code>/roms/tools/PortMaster/autoinstall/</code></li> <li>Knulli: <code>/userdata/system/.local/share/PortMaster/autoinstall/</code></li> </ul>"},{"location":"installation/installing-ports/#3-run-the-portmaster-application","title":"3. Run the PortMaster Application","text":"<p>Launch the PortMaster Application. The port will be installed automatically.</p>"},{"location":"installation/installing-ports/#alternative-manual-installation-not-recommended","title":"Alternative: Manual Installation (Not Recommended)","text":"<p>If the autoinstall folder method doesn't work, you can unzip the contents of the port into the corresponding ports folder for each custom firmware (CFW). However, this may break the port, and it may no longer start properly.</p> <p>Here are the port folder locations for manual installation:</p> <ul> <li>AmberELEC, ROCKNIX, uOS, Jelos: <code>/roms/ports/</code></li> <li>muOS: <code>/mmc/ports/</code> (for the folders) or <code>/mnt/mmc/ROMS/Ports/</code> (for the <code>.sh</code> files)</li> <li>ArkOS: <code>/roms/tools/PortMaster/autoinstall/</code></li> <li>Knulli: <code>/userdata/system/.local/share/PortMaster/autoinstall/</code></li> </ul>"},{"location":"installation/supported-handhelds/","title":"Supported Handhelds","text":"Device Name Manufacturer Resolution Supported CFW Notes Anbernic RG ARC-D Anbernic 640x480 ROCKNIX Anbernic RG ARC-S Anbernic 640x480 ROCKNIX Anbernic RG28XX Anbernic 640x480 Knulli, ROCKNIX, muOS Anbernic RG34XX Anbernic 720x480 Knulli, ROCKNIX, muOS Some ports may have issues with this aspect ratio. Results will vary from port to port. Anbernic RG351MP Anbernic 640x480 AmberELEC, ArkOS, TheRA Anbernic RG351P/M Anbernic 480x320 AmberELEC, ArkOS (Wummle), ROCKNIX Some ports may have issues with this aspect ratio. Results will vary from port to port. Anbernic RG351V Anbernic 640x480 AmberELEC, ArkOS, ROCKNIX Anbernic RG353 M/V/P Anbernic 640x480 ArkOS Anbernic RG353 VS/PS Anbernic 640x480 ArkOS, ROCKNIX Anbernic RG35XX H Anbernic 640x480 Knulli, ROCKNIX, muOS Anbernic RG35XX PLUS Anbernic 640x480 Knulli, ROCKNIX, muOS Anbernic RG35XX SP Anbernic 640x480 Knulli, ROCKNIX, muOS Anbernic RG40XX H Anbernic 640x480 Knulli, ROCKNIX, muOS Anbernic RG40XX V Anbernic 640x480 Knulli, ROCKNIX, muOS Anbernic RG503 Anbernic 960x544 ArkOS, ROCKNIX Some ports may have issues with this aspect ratio. Results will vary from port to port. Anbernic RG552 Anbernic 1920x1152 AmberELEC, ROCKNIX Some ports may have issues with this aspect ratio. Results will vary from port to port. Anbernic RGCUBEXX Anbernic 640x480 Knulli, ROCKNIX, muOS Gameforce Ace Gameforce 1920x1080 ROCKNIX Some ports may have issues with this aspect ratio. Results will vary from port to port. Gameforce Chi Gameforce 640x480 ArkOS, EmuELEC GKD Bubble Game Kiddy 640x480 EMUELEC Hardkernel ODROID GO Advance Hardkernel 480x320 AmberELEC, ArkOS, EmuELEC, ROCKNIX Some ports may have issues with this aspect ratio. Results will vary from port to port. Hardkernel ODROID GO Super Hardkernel 854x480 AmberELEC, ArkOS, EmuELEC, ROCKNIX Some ports may have issues with this aspect ratio. Results will vary from port to port. Hardkernel ODROID GO Ultra Hardkernel 854x480 AmberELEC, ArkOS, EmuELEC, ROCKNIX Some ports may have issues with this aspect ratio. Results will vary from port to port. Powkiddy RGB10 Powkiddy 640x480 ArkOS, ROCKNIX Powkiddy RGB10MAX3 Powkiddy 1280x720 ROCKNIX Powkiddy RGB10MAX3 Pro Powkiddy 854x480 ROCKNIX Some ports may have issues with this aspect ratio. Results will vary from port to port. Powkiddy RGB20S Powkiddy 640x480 AmberELEC Powkiddy RGB30 Powkiddy 720x720 ArkOS, ROCKNIX Some ports may have issues with this aspect ratio. Results will vary from port to port. Powkiddy RK2023 Powkiddy 640x480 ArkOS, ROCKNIX Powkiddy X55 Powkiddy 1280x720 ROCKNIX R33S Retro Handheld Game Console 640x480 AmberELEC, ArkOS, ROCKNIX R35S Retro Handheld Game Console 640x480 AmberELEC, ArkOS, ROCKNIX R36S Retro Handheld Game Console 640x480 AmberELEC, ArkOS, ROCKNIX Retroid Pocket 5 Retroid Pocket 1920x1080 Batocera, ROCKNIX Some ports may have issues with this aspect ratio. Results will vary from port to port. Retroid Pocket Mini Retroid Pocket 1280x960 Batocera, ROCKNIX Some ports may have issues with this aspect ratio. Results will vary from port to port. SteamDeck Valve 1280x800 Batocera, RetroDECK Some ports may have issues with this aspect ratio. Results will vary from port to port. TrimUI Brick TrimUI 1024x768 KNULLI, TrimUI Some ports may have issues with this aspect ratio. Results will vary from port to port. TrimUI Smart Pro TrimUI 1280x720 KNULLI, TrimUI XU10 Retro Handheld MagicX 640x480 AmberELEC, ArkOS, ROCKNIX"},{"location":"tools/markdown-generator/","title":"Markdown Generator","text":"Port Readme Generator Port Readme Generator <p>Use this form to generate a `portname.md` file for a port. Refer to the packaging documentation for details on where to place the file.</p> SteamDB Command Add Steam Instructions Notes Compile Instructions (optional) Controls Button Action Add Button Mapping Download Readme Generated Markdown"}]}