{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-the-portmaster-wiki","title":"Welcome to the PortMaster Wiki!","text":"<p>PortMaster is a powerful, community-driven platform that simplifies the process of managing game ports on Linux handheld devices. Designed for retro gaming enthusiasts, it offers an easy way to download, install, and update PC game ports on custom firmware setups. Whether you're playing indie classics or commercial titles, PortMaster ensures smooth compatibility for a wide range of games.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Game Port Management: Easily install and update game ports, both free and commercial titles.</li> <li>Multi-Device Support: Compatible with a variety of Linux handheld devices like AmberELEC, ArkOS, and muOS.</li> <li>User-Friendly Interface: Simple graphical interface (GUI) to handle installations and updates with ease.</li> <li>Community Contributions: Actively encourages community members to suggest new ports and improve the platform.</li> <li>Automated Library Management: Automatically handles necessary libraries for seamless gameplay, preventing system conflicts.</li> </ul>"},{"location":"#preview","title":"Preview","text":""},{"location":"#supported-games","title":"Supported Games","text":"<p>PortMaster hosts a variety of games, from indie gems to classic titles. </p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Ensure your device is running a compatible custom firmware (CFW), such as AmberELEC, ArkOS, or muOS. PortMaster is intended for Linux-based handheld systems. Installation Steps</p>"},{"location":"#installation-steps","title":"Installation Steps","text":"<p>Most supported CFWs include PortMaster by default. If not, you can install it manually using a simple installer script. For complete instructions, visit the  Installation page!</p>"},{"location":"#community","title":"Community","text":"<p>The PortMaster community thrives on collaboration. Join us on Discord to share your thoughts, contribute to development, or just talk about games: \u00a0 Discord</p>"},{"location":"#licenses","title":"Licenses","text":"<p>PortMaster is open-source software, and its components are released under their respective licenses. The platform is built on contributions from the open-source community, and special thanks go out to those who have made it possible.</p>"},{"location":"#credits","title":"Credits","text":"<p>PortMaster is a community-driven project, supported by passionate developers and contributors from around the world. Special thanks to all the developers who continue to make handheld gaming a reality, as well as the open-source community for their ongoing support and contributions.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#what-is-portmaster","title":"What is PortMaster?","text":"<p>PortMaster is a simple GUI tool designed to facilitate the downloading and installation of game ports for linux handheld devices. </p> <p>One of the goals of PortMaster is to not install or upgrade any existing OS libraries for any ports. Any of the ports that need a particular non-standard library are maintained within the ports' folder and made available specifically to that port during execution.</p> <p>Through the volunteer contributions of the mighty Port Navigators, most of the the ports available through PortMaster have been configured to launch with proper controls for the various devices that are supported.</p>"},{"location":"faq/#what-devices-are-supported","title":"What Devices are supported?","text":"<p>(Currently Outdated) The full list of supported devices can be found here</p>"},{"location":"faq/#how-can-i-install-portmaster","title":"How can I install PortMaster?","text":"<p>A guide to install Portmaster can be found here</p>"},{"location":"faq/#do-i-have-to-use-portmaster-to-install-ports","title":"Do I have to use PortMaster to install ports?","text":"<p>For the best experience you should download and install the Port trough the PortMaster Application. This ensures that the installed Port has the correct permissions aswell as the correct metadata. </p> <p>If you have a device without wifi you can simply go to the PortMaster repo, https://portmaster.games/games.html, find the title of the port you want, download it and copy the zip file into the PortMaster Autoinstall folder. Then you just run the PortMaster Application and PortMaster will install the Port for you.</p> <p>Here are the locations for the autoinstall folder for the </p> <ul> <li>AmberELEC, ROCKNIX, uOS, Jelos <code>/roms/ports/PortMaster/autoinstall/</code></li> <li>muOS <code>/mmc/MUOS/PortMaster/autoinstall/</code></li> <li>ArkOS <code>/roms/tools/PortMaster/autoinstall/</code></li> <li>Knulli <code>/userdata/system/.local/share/PortMaster/autoinstall</code></li> </ul> <p>If that does not work you can also unzip the contents of the port into the ports folders of each cfw, note that this may break the port and ports may no longer start.</p> <ul> <li>AmberELEC, ROCKNIX, uOS, Jelos <code>/roms/ports/</code></li> <li>muOS <code>/mmc/ports/ for the folders and /mnt/mmc/ROMS/Ports/ for the .sh files</code></li> <li>ArkOS <code>/roms/tools/PortMaster/autoinstall/</code></li> <li>Knulli <code>/userdata/system/.local/share/PortMaster/autoinstall</code></li> </ul>"},{"location":"faq/#how-do-i-get-more-info-about-the-ports-in-portmaster-like-the-sources-used-and-additional-asset-needs-if-applicable","title":"How do I get more info about the ports in PortMaster like the sources used and additional asset needs if applicable?","text":"<p>You can find all Ports with included instructions on the PortMaster Wiki</p>"},{"location":"faq/#if-there-are-updates-to-ports-how-will-that-work","title":"If there are updates to Ports, how will that work?","text":"<p>Just run PortMaster and reinstall the port. You can also unzip the associated <code>.zip</code> for the port you want and unzip the contents of it to the ports folder. This should install the latest port related files if they've been updated in PortMaster. In most cases, it should not impact any existing game data you had to provide or existing saves unless the updated port made changes to the port backend that impacts previous saves.</p>"},{"location":"faq/#how-can-i-help-add-ports-to-portmaster","title":"How can I help add ports to PortMaster?","text":"<p>See our Contribute section on https://portmaster.games/ If you have any questions about the process not detailed in the documentation feel free to reach out on our Discord Server.</p>"},{"location":"faq/#how-can-i-run-my-port-via-ssh-to-troubleshoot-any-starting-issues","title":"How can I run my Port via ssh to troubleshoot any starting issues?","text":"<p>Download Putty: https://the.earth.li/~sgtatham/putty/latest/w64/putty.exe</p> <ul> <li>Start Putty</li> <li>Enter your Device IP</li> <li>Open</li> <li>Enter your ssh credentials</li> </ul> <p>-- Amberelec: root / amberelec --  ArkOS    : ark / ark  --  Jelos    : root / check under system settings - enter: <pre><code>cd /roms/ports/\n./WhateveryourgameIsCalled.sh\n</code></pre> You can then mark the output with your mouse and with ctrl + c / ctrl + v paste it into the ports-help channel on discord.</p>"},{"location":"games/","title":"All of our amazing ports will be here, am I right Bamboozler?","text":""},{"location":"contribute/","title":"Index","text":"<p>yo</p>"},{"location":"contribute/packaging/","title":"Packaging Ports for PortMaster","text":""},{"location":"contribute/packaging/#launch-script-templates","title":"Launch Script Templates","text":"<p>Info</p> <p>These scripts are for ports that support native rendering to kms/drm, for X11 ports see below!</p> BasicGodot 3 <pre><code>#!/bin/bash\nXDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}\n\nif [ -d \"/opt/system/Tools/PortMaster/\" ]; then\n  controlfolder=\"/opt/system/Tools/PortMaster\"\nelif [ -d \"/opt/tools/PortMaster/\" ]; then\n  controlfolder=\"/opt/tools/PortMaster\"\nelif [ -d \"$XDG_DATA_HOME/PortMaster/\" ]; then\n  controlfolder=\"$XDG_DATA_HOME/PortMaster\"\nelse\n  controlfolder=\"/roms/ports/PortMaster\"\nfi\n\nsource $controlfolder/control.txt\n[ -f \"${controlfolder}/mod_${CFW_NAME}.txt\" ] &amp;&amp; source \"${controlfolder}/mod_${CFW_NAME}.txt\"\n\nget_controls\nGAMEDIR=/$directory/ports/portfolder/\nCONFDIR=\"$GAMEDIR/conf/\"\n\nmkdir -p \"$GAMEDIR/conf\"\ncd $GAMEDIR\n\n&gt; \"$GAMEDIR/log.txt\" &amp;&amp; exec &gt; &gt;(tee \"$GAMEDIR/log.txt\") 2&gt;&amp;1\n\nexport XDG_DATA_HOME=\"$CONFDIR\"\nexport LD_LIBRARY_PATH=\"$GAMEDIR/libs.${DEVICE_ARCH}:$LD_LIBRARY_PATH\"\nexport SDL_GAMECONTROLLERCONFIG=\"$sdl_controllerconfig\"\nbind_directories ~/.portfolder $GAMEDIR/conf/.portfolder\n\n$GPTOKEYB \"portexecutable.${DEVICE_ARCH}\" -c \"./portname.gptk.$ANALOGSTICKS\" &amp;\npm_platform_helper \"$GAMEDIR/portexecutable.${DEVICE_ARCH}\"\n./portexecutable.${DEVICE_ARCH}\npm_finish\n</code></pre> <pre><code>#!/bin/bash\n\nXDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}\n\nif [ -d \"/opt/system/Tools/PortMaster/\" ]; then\n  controlfolder=\"/opt/system/Tools/PortMaster\"\nelif [ -d \"/opt/tools/PortMaster/\" ]; then\n  controlfolder=\"/opt/tools/PortMaster\"\nelif [ -d \"$XDG_DATA_HOME/PortMaster/\" ]; then\n  controlfolder=\"$XDG_DATA_HOME/PortMaster\"\nelse\n  controlfolder=\"/roms/ports/PortMaster\"\nfi\n\nsource $controlfolder/control.txt\n\n[ -f \"${controlfolder}/mod_${CFW_NAME}.txt\" ] &amp;&amp; source \"${controlfolder}/mod_${CFW_NAME}.txt\"\n\nget_controls\n\nGAMEDIR=/$directory/ports/portfolder/\nCONFDIR=\"$GAMEDIR/conf/\"\n\n&gt; \"$GAMEDIR/log.txt\" &amp;&amp; exec &gt; &gt;(tee \"$GAMEDIR/log.txt\") 2&gt;&amp;1\n\nmkdir -p \"$GAMEDIR/conf\"\ncd $GAMEDIR\n\nruntime=\"frt_3.2.3\"\nif [ ! -f \"$controlfolder/libs/${runtime}.squashfs\" ]; then\n  # Check for runtime if not downloaded via PM\n  if [ ! -f \"$controlfolder/harbourmaster\" ]; then\n    pm_message \"This port requires the latest PortMaster to run, please go to https://portmaster.games/ for more info.\"\n    sleep 5\n    exit 1\n  fi\n\n  $ESUDO $controlfolder/harbourmaster --quiet --no-check runtime_check \"${runtime}.squashfs\"\nfi\n\n# Set the XDG environment variables for config &amp; savefiles\nexport XDG_DATA_HOME=\"$CONFDIR\"\nexport SDL_GAMECONTROLLERCONFIG=\"$sdl_controllerconfig\"\n\n#  If XDG Path does not work\n# Use _directories to reroute that to a location within the ports folder.\nbind_directories ~/.portfolder $GAMEDIR/conf/.portfolder \n\n# Setup Godot\ngodot_dir=\"$HOME/godot\"\ngodot_file=\"$controlfolder/libs/${runtime}.squashfs\"\n$ESUDO mkdir -p \"$godot_dir\"\n$ESUDO umount \"$godot_file\" || true\n$ESUDO mount \"$godot_file\" \"$godot_dir\"\nPATH=\"$godot_dir:$PATH\"\n\n# By default FRT sets Select as a Force Quit Hotkey, with this we disable that.\nexport FRT_NO_EXIT_SHORTCUTS=FRT_NO_EXIT_SHORTCUTS \n\n\n$GPTOKEYB \"$runtime\" -c \"./godot.gptk\" &amp;\npm_platform_helper \"$godot_dir/$runtime\"\n\"$runtime\" $GODOT_OPTS --main-pack \"gamename.pck\"\n\nif [[ \"$PM_CAN_MOUNT\" != \"N\" ]]; then\n    $ESUDO umount \"$godot_dir\"\nfi\npm_finish\n</code></pre> <p></p> <p>Info</p> <p>These scripts are for ports that X11 windowing and therefore need the WestonPack runtime!</p> BasicGodot 4 <pre><code>#!/bin/bash\nXDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}\n\nif [ -d \"/opt/system/Tools/PortMaster/\" ]; then\n  controlfolder=\"/opt/system/Tools/PortMaster\"\nelif [ -d \"/opt/tools/PortMaster/\" ]; then\n  controlfolder=\"/opt/tools/PortMaster\"\nelif [ -d \"$XDG_DATA_HOME/PortMaster/\" ]; then\n  controlfolder=\"$XDG_DATA_HOME/PortMaster\"\nelse\n  controlfolder=\"/roms/ports/PortMaster\"\nfi\n\nsource $controlfolder/control.txt\n[ -f \"${controlfolder}/mod_${CFW_NAME}.txt\" ] &amp;&amp; source \"${controlfolder}/mod_${CFW_NAME}.txt\"\n\nget_controls\nGAMEDIR=/$directory/ports/portfolder/\nCONFDIR=\"$GAMEDIR/conf/\"\n\nmkdir -p \"$GAMEDIR/conf\"\ncd $GAMEDIR\n\n&gt; \"$GAMEDIR/log.txt\" &amp;&amp; exec &gt; &gt;(tee \"$GAMEDIR/log.txt\") 2&gt;&amp;1\n\nexport XDG_DATA_HOME=\"$CONFDIR\"\nexport LD_LIBRARY_PATH=\"$GAMEDIR/libs.${DEVICE_ARCH}:$LD_LIBRARY_PATH\"\nexport SDL_GAMECONTROLLERCONFIG=\"$sdl_controllerconfig\"\nbind_directories ~/.portfolder $GAMEDIR/conf/.portfolder\n\n$GPTOKEYB \"portexecutable.${DEVICE_ARCH}\" -c \"./portname.gptk.$ANALOGSTICKS\" &amp;\npm_platform_helper \"$GAMEDIR/portexecutable.${DEVICE_ARCH}\"\n./portexecutable.${DEVICE_ARCH}\npm_finish\n</code></pre> <pre><code>#!/bin/bash\n\nXDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}\n\nif [ -d \"/opt/system/Tools/PortMaster/\" ]; then\n  controlfolder=\"/opt/system/Tools/PortMaster\"\nelif [ -d \"/opt/tools/PortMaster/\" ]; then\n  controlfolder=\"/opt/tools/PortMaster\"\nelif [ -d \"$XDG_DATA_HOME/PortMaster/\" ]; then\n  controlfolder=\"$XDG_DATA_HOME/PortMaster\"\nelse\n  controlfolder=\"/roms/ports/PortMaster\"\nfi\n\nsource $controlfolder/control.txt\n\n[ -f \"${controlfolder}/mod_${CFW_NAME}.txt\" ] &amp;&amp; source \"${controlfolder}/mod_${CFW_NAME}.txt\"\n\nget_controls\n\nGAMEDIR=/$directory/ports/portfolder/\nCONFDIR=\"$GAMEDIR/conf/\"\n\n&gt; \"$GAMEDIR/log.txt\" &amp;&amp; exec &gt; &gt;(tee \"$GAMEDIR/log.txt\") 2&gt;&amp;1\n\nmkdir -p \"$GAMEDIR/conf\"\ncd $GAMEDIR\n\nruntime=\"frt_3.2.3\"\nif [ ! -f \"$controlfolder/libs/${runtime}.squashfs\" ]; then\n  # Check for runtime if not downloaded via PM\n  if [ ! -f \"$controlfolder/harbourmaster\" ]; then\n    pm_message \"This port requires the latest PortMaster to run, please go to https://portmaster.games/ for more info.\"\n    sleep 5\n    exit 1\n  fi\n\n  $ESUDO $controlfolder/harbourmaster --quiet --no-check runtime_check \"${runtime}.squashfs\"\nfi\n\n# Set the XDG environment variables for config &amp; savefiles\nexport XDG_DATA_HOME=\"$CONFDIR\"\nexport SDL_GAMECONTROLLERCONFIG=\"$sdl_controllerconfig\"\n\n#  If XDG Path does not work\n# Use _directories to reroute that to a location within the ports folder.\nbind_directories ~/.portfolder $GAMEDIR/conf/.portfolder \n\n# Setup Godot\ngodot_dir=\"$HOME/godot\"\ngodot_file=\"$controlfolder/libs/${runtime}.squashfs\"\n$ESUDO mkdir -p \"$godot_dir\"\n$ESUDO umount \"$godot_file\" || true\n$ESUDO mount \"$godot_file\" \"$godot_dir\"\nPATH=\"$godot_dir:$PATH\"\n\n# By default FRT sets Select as a Force Quit Hotkey, with this we disable that.\nexport FRT_NO_EXIT_SHORTCUTS=FRT_NO_EXIT_SHORTCUTS \n\n\n$GPTOKEYB \"$runtime\" -c \"./godot.gptk\" &amp;\npm_platform_helper \"$godot_dir/$runtime\"\n\"$runtime\" $GODOT_OPTS --main-pack \"gamename.pck\"\n\nif [[ \"$PM_CAN_MOUNT\" != \"N\" ]]; then\n    $ESUDO umount \"$godot_dir\"\nfi\npm_finish\n</code></pre>"},{"location":"contribute/theme-engine/","title":"Theme engine","text":""},{"location":"contribute/theme-engine/#portmaster-theme-specification","title":"PortMaster Theme Specification","text":"<p>PortMasters new gui has a flexible theme system build around a <code>theme.json</code> file.</p> <p>Warning</p> <p>The following documentation is incomplete, this page does not cover all of the theme engines functions!</p>"},{"location":"contribute/theme-engine/#scene-format","title":"Scene Format","text":"<p>The theme has a few different sections:</p> <ul> <li><code>#info</code>: Info about the theme</li> <li><code>#base</code>: The base element, which every gui element in the theme inherits from</li> <li><code>#pallet</code>: Predefined colours for the theme.</li> <li><code>#resources</code>: Images the theme uses, can either be an atlas or individual images.</li> <li><code>#elements</code>: Reusable elements that different scenes in your theme can use.</li> <li>scenes: Scenes that the gui uses</li> </ul> <p>It also uses a template system for the text, so that the gui elements automatically update as the text changes.</p>"},{"location":"contribute/theme-engine/#element-inheritence-order","title":"Element Inheritence Order:","text":"<p>The order that elemets get their values is defined as:</p> <p>element -&gt; scene <code>#base</code> -&gt; global <code>#base</code></p> <p>If you use a reusable element the order is:</p> <p>element -&gt; element <code>#element</code> -&gt; scene <code>#base</code> -&gt; global <code>#base</code></p>"},{"location":"contribute/theme-engine/#element-overrides","title":"Element overrides","text":"<p>You can override values in elements based on hardware by specifying a hardware capabilities on an attribute:</p> <pre><code>    \"#base\": {\n        \"font\": \"DejaVuSans.ttf\",\n        \"font-scale[hires]\": 2.0,\n        \"font-scale[5:3,hires]\": 3.0\n    },\n</code></pre> <p>You can override entire elements based on hardware capabilities:</p> <pre><code>        \"ports_list\": {\n            \"area\": [0.0, 0.1, 0.4, 0.95],\n            \"border-x\": 16,\n            \"roundness\": 10,\n            \"font-size\": 14,\n            \"font-color\": \"list_text\",\n            \"select-color\": \"list_selected\",\n            \"text-clip\": true,\n            \"text-wrap\": false,\n            \"autoscroll\": \"slide\",\n            \"scroll-speed\": 30,\n            \"scroll-delay-start\": 500,\n            \"scroll-delay-end\":   500\n        },\n        \"ports_list[hires]\": {\n            \"area\": [0.0, 0.1, 0.3, 0.95]\n        },\n</code></pre> <p>Since this uses the capabilities system used in ports you can add them together and or not them.</p> <p>Currently the capabilities are:</p> <ul> <li><code>hires</code>: devices with a screen resolution greater than 640:480</li> <li><code>lowres</code>: devices with a screen resolution smaller then 640:480</li> <li><code>power</code>: any device above an <code>rk3326</code> cpu.</li> <li><code>opengl</code>: any device with <code>OpenGL</code>, not OpenGLES.</li> <li><code>wide</code>: any aspect ratio above 4:3</li> <li><code>3:2</code>: aspect ratio of 3:2</li> <li><code>4:3</code>: aspect ratio of 4:3</li> <li><code>5:3</code>: aspect ratio of 5:3</li> <li><code>16:9</code>: aspect ratio of 16:9</li> <li><code>427:240</code>: aspect ratio of 427:240 (ogs/ogu &amp; friends)</li> <li><code>480x320</code>: screen resolution of 480x320</li> <li><code>640x480</code>: screen resolution of 640x480</li> <li><code>854x480</code>: screen resolution of 854x480</li> <li><code>960x544</code>: screen resolution of 960x544</li> <li><code>1280x720</code>: screen resolution of 1280x720</li> <li><code>1920x1152</code>: screen resolution of 1920x1152</li> <li><code>language</code>: the current language (en_US, de_DE, es_ES, fr_FR, it_IT, and pl_PL)</li> </ul> <p>You can combine them like so:</p> <ul> <li><code>!lowres|hires</code>: must be exactly 640:480</li> </ul>"},{"location":"contribute/theme-engine/#scenes","title":"Scenes","text":"<p>Scenes can define their own <code>#base</code> element, which will cause all elements in that scene to inherit from.</p> <p>Currently there are the following scenes:</p> <ul> <li><code>main_menu</code>: The main menu</li> <li><code>option_menu</code>: Options screen</li> <li><code>ports_list</code>: The list of ports</li> <li><code>filter_list</code>: Filter scene that pops up over the ports_list scene.</li> <li><code>port_info</code>: Detailed port information.</li> <li><code>port_info_popup</code>: A popup scene that displays above the <code>port_info</code> scene</li> <li><code>message_window</code>: A scrolling list of messages, used during downloading, installation, and fetching the latest ports information.</li> <li><code>message_box</code>: An alert box</li> <li><code>themes_list</code>: Theme manager scene.</li> <li><code>runtime_list</code>: Runtime manager scene.</li> </ul>"},{"location":"contribute/theme-engine/#scene-main_menu","title":"Scene: main_menu","text":"<p>This is the main menu scene, it requires the <code>option_list</code> element. It is the first scene to load and if backed out of will quit the program.</p> <pre><code>    \"main_menu\": {\n        \"option_list\": {\n            \"area\": [ 0.0, 0.0, 1.0, 1.0 ],\n            \"font\": \"DejaVuSans.ttf\",\n            \"font-size\": 10,\n            \"list\": []\n        },\n        \"button_bar\": {\n            \"area\": [ 0.0, 8.0, 1.0, 1.0 ],\n            \"font\": \"DejaVuSans.ttf\",\n            \"font-size\": 10,\n            \"bar\": []\n        }\n    }\n</code></pre> <p>The option_list can contain whatever text you feel is most appropriate, the actual option that gets called is the same option in the <code>option</code> list.</p>"},{"location":"contribute/theme-engine/#scene-options_menu","title":"Scene: options_menu","text":"<p>This is the options menu scene, it requires the <code>option_list</code> element. It is loaded from main-menu, this scene is reused for each subsequent option submenu.</p> <pre><code>    \"options_menu\": {\n        \"option_list\": {\n            \"area\": [ 0.0, 0.0, 1.0, 1.0 ],\n            \"font\": \"DejaVuSans.ttf\",\n            \"font-size\": 10,\n            \"list\": []\n        },\n        \"button_bar\": {\n            \"area\": [ 0.0, 8.0, 1.0, 1.0 ],\n            \"font\": \"DejaVuSans.ttf\",\n            \"font-size\": 10,\n            \"bar\": []\n        }\n    }\n</code></pre>"},{"location":"contribute/theme-engine/#scene-ports_list","title":"Scene: ports_list","text":"<p>This is the main list of ports, it requires the <code>ports_list</code> element. It is loaded from main-menu, this scene is reused for listing ports for installing and uninstalling.</p> <pre><code>    \"ports_list\": {\n        \"ports_list\": {\n            \"area\": [ 0.0, 0.0, 1.0, 1.0 ],\n            \"font\": \"DejaVuSans.ttf\",\n            \"font-size\": 10,\n            \"list\": []\n        },\n        \"button_bar\": {\n            \"area\": [ 0.0, 8.0, 1.0, 1.0 ],\n            \"font\": \"DejaVuSans.ttf\",\n            \"font-size\": 10,\n            \"bar\": []\n        }\n    }\n</code></pre>"},{"location":"contribute/theme-engine/#elements","title":"Elements","text":""},{"location":"contribute/theme-engine/#the-basics","title":"The basics","text":"<p>Elements are always rectangles, they must always have an <code>area</code> parameter. This can be pixels specifically, or a percentage of the parent area.</p> <p>If you specify negative pixels for the width/height it subtracts it from the width/height of the parent area.</p> <p>If you specify the coordinates in pixels it is in thef format: <code>x, y, width, height</code></p> <p>If you specify it as a percentage of the parent area it is as: <code>top-left-x, top-left-y, bottom-right-x, bottom-right-y</code></p> <pre><code>    \"get_rect_perc\": {\n        // 25%, 25% to 75%, 75%\n        \"area\": [0.25, 0.25, 0.75, 0.75]\n    },\n\n    \"get_rect_px\": {\n        // same as above on a 640x480 display\n        \"area\": [160, 120, 320, 240]\n    },\n\n    \"get_rect_inset\": {\n        // same as above on a 640x480 display\n        \"area\": [160, 120, -160, -120]\n    },\n</code></pre> <p>As hinted to above, you can specify a parent element to use as the basis of the calculating element positions.</p> <pre><code>        \"left_pane\": {\n            // [0, 0, 192, 480] on 640x480 display\n            \"area\": [ 0.0, 0.0, 0.3, 1.0 ]\n        },\n        \"right_pane\": {\n            // [192, 0, 448, 480] on 640x480 display\n            \"area\": [ 0.3, 0.0, 1.0, 1.0 ]\n        },\n        \"port_info_image_area\": {\n            // [202, 10, 236, 230] using the above right_pane as the basis\n            \"parent\": \"right_pane\",\n            \"area\": [ 10, 10, -10, 0.5 ]\n        },\n        \"port_info_text_area\": {\n            // [202, 240, 236, 230] using the above right_pane as the basis\n            \"parent\": \"right_pane\",\n            \"area\": [ 10, 0.5, -10, -10 ]\n        },\n</code></pre> <p>By mixing and matching these you can build very powerful layouts.</p> <p>You can also use the element overrides to further customise for different screen sizes.</p> <pre><code>        \"left_pane\": {\n            \"area\": [ 0.0, 0.0, 0.3, 1.0 ],\n            \"area[wide]\": [ 0.0, 0.0, 0.4, 1.0 ]\n        },\n        \"right_pane\": {\n            \"area\": [ 0.3, 0.0, 1.0, 1.0 ],\n            \"area[wide]\": [ 0.4, 0.0, 1.0, 1.0 ]\n        },\n</code></pre> <p>Elements can be themed by setting a <code>fill</code>, <code>outline</code>, <code>thickness</code>, and <code>roundness</code>:</p> <ul> <li><code>fill</code>: the color to fill in the elements rect</li> <li><code>outline</code>: the color of the outline for the elements rect</li> <li><code>thickness</code>: how thick the stroke of the outline is</li> <li><code>roundess</code>: if sdlGFX is available, it will make a roundrect with x pixels of roundness in the corners.</li> <li><code>progress-fill</code>: this is a special fill colour, used for the progress bar.</li> </ul>"},{"location":"contribute/theme-engine/#displaying-text","title":"Displaying Text","text":"<p>Currently there are a few ways of displaying text.</p> <p>To display text at a minimum you need a <code>font</code>, <code>font-size</code>, <code>font-color</code>, and <code>text</code>.</p> <pre><code>    \"text_element\": {\n        \"area\": [0.25, 0.25, 0.75, 0.75],\n        \"text\": \"Text to be displayed!\",\n        \"font\": \"DejaVuSans.ttf\",\n        \"font-size\": 20,\n        \"font-color\": [0, 0, 0]\n    }\n</code></pre> <p>A special option is <code>font-scale</code> which should be used to broadly scale fonts across multiple elements or scenes using the element overrides.</p> <pre><code>    \"#base\": {\n        \"font-scale[hires]\": 2.0,\n    }\n</code></pre> <p>You can align text to different positions of the element.</p> <ul> <li><code>topleft</code></li> <li><code>topcenter</code></li> <li><code>topright</code></li> <li><code>midleft</code></li> <li><code>center</code></li> <li><code>midright</code></li> <li><code>bottomleft</code></li> <li><code>bottomcenter</code></li> <li><code>bottomright</code></li> </ul> <p>You can control the way text is displayed with word wrapping, automatic scrolling, clipping, and scaling.</p> <ul> <li>shrink/grow the text to fill the region: <code>\"text-clip\": false</code></li> <li>clip the text and just show what is visible: <code>\"text-clip\": true</code></li> <li>word wrap the text if it is too wide for the area provided: <code>\"text-wrap\": true</code></li> </ul> <p>It also supports text auto-scrolling if it doesnt fit within the area it is displayed. It will horizontally scroll if the text is wider (word wrap is off), and vertically scroll if it is too tall (word-wrap is on).</p> <pre><code>    \"element_name\": {\n        // Other element bits and bobs here.\n\n        \"text-clip\": true,          // This must be true for scrolling to work\n        \"text-wrap\": false,         // If text-wrap is false, it will default to a horizontal scroll, otherwise it defaults to a vertical scroll\n\n        \"autoscroll\": \"slide\",      // null does nothing, \"slide\" scrolls down then resets, \"marquee\" scrolls back and forth\n\n        \"scroll-speed\": 30,         // How many miliseconds between each scrolling step\n        \"scroll-delay-start\": 500,  // How many miliseconds to wait before starting to scroll\n        \"scroll-delay-end\":   500,   // How many miliseconds to wait at the end of scrolling\n\n        \"scroll-direction\": \"horizontal\" // override the defaults assumed based on text-wrap\n    }\n</code></pre>"},{"location":"contribute/theme-engine/#images","title":"Images","text":"<p>Probably should write something here.</p>"},{"location":"contribute/theme-engine/#lists","title":"Lists","text":"<p>The list system is quite adequate</p>"},{"location":"contribute/theme-engine/#basic-presentation-options","title":"Basic presentation options","text":"<pre><code>    \"element_name\": {\n        \"select-color\":    [255, 128, 128],  // color to draw the selected item as\n        \"select-fill\":     [128, 128, 128],  // color to fill behind the selected item\n        \"alt-fill\":        [210, 210, 210],  // color to fill alternating rows\n        \"no-select-color\": [128, 128, 128],  // color to draw text on unselectable rows.\n        \"no-select-fill\":  [210, 210, 210],  // color to fill on unselectable rows.\n        \"inactive-select-color\": [128,  64,  64],  // color to draw the selected item if the element is inactive\n    }\n</code></pre>"},{"location":"contribute/theme-engine/#pointer","title":"Pointer","text":"<pre><code>    \"element_name\": {\n        \"pointer\": \"pointer.png\",                 // pointer image\n        \"pointer-align\": [\"midright\", \"midleft\"], // poisition of (1) list/text to attach the position (2) of the pointer to\n        \"pointer-size\": [128, 64],                // scale it to this size, otherwise use the size of the image provided\n        \"pointer-attach\": \"text\",                 // attach to the rendered \"text\" rect, or the \"list\" item rect.\n        \"pointer-offset\": [0, 0],                 // offset it by x,y pixels after the position is calculated.\n        \"pointer-flip-x\": false,                  // flip the image horizontally\n        \"pointer-flip-y\": false,                  // flip it vertically\n        \"pointer-mirror\": false,                  // mirror the pointer and display on the other side of the list item\n        \"pointer-mirror-x\": false,                // flip the mirrored pointer horizontally\n        \"pointer-mirror-y\": false,                // flip the mirrored pointer vertically\n    }\n</code></pre>"},{"location":"contribute/theme-engine/#config","title":"<code>#config</code>","text":"<p>The <code>#config</code> section in a scene is used for changing the behaviour of a scene, currently it is only used for setting button mappings in the <code>port_info</code> and <code>port_info_popup</code> scenes, but will be expanded as needed.</p> <p>By default the <code>port_info</code> scene is defined as:</p> <pre><code>    \"port_info\": {\n        \"#config\": {\n            \"buttons\": {\n                \"UP\": \"prev_port\",\n                \"DOWN\": \"next_port\"\n            }\n        }\n    }\n</code></pre> <p>However if a <code>port_info_popup</code> is present it will default to this:</p> <pre><code>    \"port_info\": {\n        \"#config\": {\n            \"buttons\": {\n                \"LEFT\": \"prev_port\",\n                \"RIGHT\": \"next_port\",\n                \"UP\": \"port_info_popup\"\n            }\n        }\n    },\n\n    \"port_info_popup\": {\n        \"#config\": {\n            \"buttons\": {\n                \"DOWN\": \"pop_scene\"\n            }\n        }\n    }\n</code></pre> <p>The code will automatically set the buttons for the button bar. The actions <code>prev_port</code> and <code>next_port</code> do not add to the button bar to stop if from being crowded.</p> <p>Currently the only actions are:</p> <ul> <li><code>prev_port</code></li> <li><code>next_port</code></li> <li><code>port_info_popup</code></li> <li><code>pop_scene</code></li> </ul> <p>More will be added as required.</p>"},{"location":"contribute/theme-engine/#special-words","title":"Special Words","text":"<p>Within the templating system we have special words for things like button bindings and checkboxes. They are used for showing buttons and actions, and checkboxes.</p> <p>It is possible to either override these special words with text, or replace them with an image.</p> Special Word Description <code>_A</code> Button A <code>_B</code> Button B <code>_X</code> Button X <code>_Y</code> Button Y <code>_UP</code> Button UP <code>_DOWN</code> Button DOWN <code>_LEFT</code> Button LEFT <code>_RIGHT</code> Button RIGHT <code>_START</code> Button START <code>_SELECT</code> Button SELECT <code>_L</code> Button L <code>_R</code> Button R <code>_CHECKED</code> Checked item in a list <code>_UNCHECKED</code> Unchecked item in a list <p>To replace the words with text you can simply add the following to your theme, like used in the <code>basic_theme</code>:</p> <pre><code>    \"#override\": {\n        \"_A\":         \"A:\",\n        \"_B\":         \"B:\",\n        \"_X\":         \"X:\",\n        \"_Y\":         \"Y:\",\n        \"_UP\":        \"UP:\",\n        \"_DOWN\":      \"DOWN:\",\n        \"_LEFT\":      \"LEFT:\",\n        \"_RIGHT\":     \"RIGHT:\",\n        \"_START\":     \"START:\",\n        \"_SELECT\":    \"SELECT:\",\n        \"_L\":         \"L\",\n        \"_R\":         \"R\",\n        \"_CHECKED\":   \"[x]\",\n        \"_UNCHECKED\": \"[  ]\",\n    }\n</code></pre> <p>To replace them with images you will need to load either images and use name to override the image name, or use an image atlas like in the <code>default_theme</code>.</p> <pre><code>    \"#resources\": {\n        \"buttons.png\": {\n            \"atlas\": {\n                \"_A\":         [  0,   0, 180, 180],\n                \"_B\":         [180,   0, 180, 180],\n                \"_X\":         [360,   0, 180, 180],\n                \"_Y\":         [540,   0, 180, 180],\n                \"_UP\":        [900, 360, 180,  90],\n                \"_DOWN\":      [900, 450, 180,  90],\n                \"_LEFT\":      [900, 180,  90, 180],\n                \"_RIGHT\":     [990, 180,  90, 180],\n                \"_START\":     [  0, 180, 360, 180],\n                \"_SELECT\":    [360, 180, 360, 180],\n                \"_L\":         [  0, 360, 270, 180],\n                \"_R\":         [270, 360, 270, 180],\n                \"_CHECKED\":   [900,   0, 180, 180],\n                \"_UNCHECKED\": [720,   0, 180, 180]\n            }\n        }\n    }\n</code></pre>"},{"location":"contribute/theme-engine/#text-template-system","title":"Text Template System","text":"<p>PortMaster has a simple text templating engine, it supports tags and if/then/else statements.</p> <p>You can use the tags in text areas and they will automatically update as their value changes.</p> <p>An example of using the system.time_24hr tag: <pre><code>    {\n        // Element options\n        \"text\": \"{system.time_24hr}\"\n    }\n</code></pre></p> <p>If no data is found for a tag the tag name is returned.</p> <pre><code>    {\n        // This will display \"{system.unknown_tag}\"\n        \"text\": \"{system.unknown_tag}\"\n    }\n</code></pre> <p>Obviously multiple tags can be used at once:</p> <pre><code>    {\n        // This might display \"ArkOS (07232023)\" on ArkOS for example\"\n        \"text\": \"OS: {system.cfw_name} ({system.cfw_version})\"\n    }\n</code></pre> <p>As mentioned above you can use if/then/else statements in the text:</p> <pre><code>    {\n        // If port_info.runtime is not false it will display \"\\nRuntime: {}\"\n        \"text\": \"{if:port_info.runtime}\\nRuntime: {port_info.runtime} ({port_info.runtime_status}){else}No Runtime Required{endif}\"\n    }\n</code></pre> <p>You can even compare two tags text:</p> <pre><code>    {\n        // if ports_list.total_ports doesnt equal ports_list.filter_ports\n        \"text\": \"{if:!ports_list.total_ports::ports_list.filtered}{ports_list.filter_ports} / {ports_list.total_ports}{else}{ports_list.total_ports}{endif}\"\n    }\n</code></pre> <p>The format is:</p> <p><code>{if:[!]&lt;KEYNAME&gt;[:&lt;EQUALS TEXT&gt;[:OTHER KEY]]}&lt;TRUTH TEXT&gt;[{else}&lt;ELSE TEXT&gt;]{endif}</code></p>"},{"location":"contribute/theme-engine/#hopefully-this-helps-if-not-oh-well-i-will-write-it-better-later-on","title":"Hopefully this helps, if not... oh well i will write it better later on.","text":"Tag Result <code>{if:!port_info.runtime}</code> <code>port_info.runtime</code> != \"\" <code>{if:port_info.runtime}</code> <code>port_info.runtime</code> == \"\" <code>{if:port_info.runtime:Mono 6.12.0.122}</code> <code>port_info.runtime</code> == \"Mono 6.12.0.122\" <code>{if:!port_info.runtime:Mono 6.12.0.122}</code> <code>port_info.runtime</code> != \"Mono 6.12.0.122\" <code>{if:ports_list.total_ports::ports_list.filter_ports}</code> <code>ports_list.total_ports</code> == <code>ports_list.filter_ports</code> <code>{if:!ports_list.total_ports::ports_list.filter_ports}</code> <code>ports_list.total_ports</code> != <code>ports_list.filter_ports</code>"},{"location":"contribute/theme-engine/#system-tags","title":"System tags","text":"<ul> <li>system.time_24hr</li> <li>system.time_12hr</li> <li>system.free_space</li> <li>system.used_space</li> <li>system.cfw_name</li> <li>system.cfw_version</li> <li>system.device_name</li> <li>system.battery_level</li> <li> <p>system.ip_address</p> </li> <li> <p>system.progress_text</p> </li> <li> <p>system.progress_amount</p> </li> <li> <p>system.progress_perc_5</p> </li> <li>system.progress_perc_10</li> <li>system.progress_perc_20</li> <li>system.progress_perc_25</li> <li>system.progress_spinner_5</li> <li>system.progress_spinner_10</li> <li>system.progress_spinner_20</li> <li>system.progress_spinner_25</li> <li>system.progress_perc_5_or_spinner</li> <li>system.progress_perc_10_or_spinner</li> <li>system.progress_perc_20_or_spinner</li> <li>system.progress_perc_25_or_spinner</li> </ul>"},{"location":"contribute/theme-engine/#port-info-tags","title":"Port info tags","text":"<ul> <li>port_info.name</li> <li>port_info.image</li> <li>port_info.title</li> <li>port_info.description</li> <li>port_info.instructions</li> <li>port_info.genres</li> <li>port_info.porter</li> <li>port_info.ready_to_run</li> <li>port_info.download_size</li> <li>port_info.runtime</li> <li>port_info.runtime_status</li> </ul>"},{"location":"contribute/theme-engine/#ports-list-tags","title":"Ports List tags","text":"<ul> <li>ports_list.total_ports</li> <li>ports_list.filter_ports</li> <li>ports_list.filters</li> </ul>"},{"location":"contribute/theme-engine/#theme-info-tags","title":"Theme info tags","text":"<ul> <li>theme_info.image</li> <li>theme_info.name</li> <li>theme_info.description</li> <li>theme_info.creator</li> <li>theme_info.status</li> </ul>"},{"location":"contribute/theme-engine/#control-flow-of-portmaster","title":"Control flow of PortMaster","text":"<pre><code>Main:\n  -&gt; Install Menu\n  -&gt; Uninstall Menu -&gt; Port List [Installed filter]\n  -&gt; Options\n  -&gt; Quit\n\nInstall Menu:\n  -&gt; All Ports    -&gt; Port List [No filter]\n  -&gt; Ready To Run -&gt; Port List [RTR filter]\n\n  -&gt; Lists 1      -&gt; Custom List\n  -&gt; Lists 2      -&gt; Custom List\n  -&gt; Lists 3      -&gt; Custom List\n  -&gt; Lists 4      -&gt; Custom List\n\n  -&gt; Back\n\nPort List:\n  -&gt; List of Ports\n    -&gt; Inspect\n    -&gt; Back\n\nOptions:\n  -&gt; TBD.\n  -&gt; Back\n\nInspect:\n  -&gt; Install/Re-Install or Uninstall\n  -&gt; Back\n\nInstall/Uninstall:\n  -&gt; Message Screen\n  -&gt; Back\n</code></pre>"},{"location":"contribute/translation/","title":"Translation","text":""},{"location":"contribute/translation/#help-translate-portmaster","title":"Help Translate PortMaster","text":"<p>Want to see PortMaster in your language? Join our translation efforts on  Crowdin and contribute to making PortMaster more accessible worldwide!</p> <p> Translate PortMaster on Crowdin</p> <p>Info</p> <p>Please let us know on our Discord server if you are working on translations.</p>"},{"location":"contribute/gui/theme-engine/","title":"Themes","text":""},{"location":"contribute/gui/theme-engine/#portmaster-theme-specification","title":"PortMaster Theme Specification","text":"<p>PortMasters new gui has a flexible theme system build around a <code>theme.json</code> file.</p> <p>Warning</p> <p>The following documentation is incomplete, this page does not cover all of the theme engines functions!</p>"},{"location":"contribute/gui/theme-engine/#scene-format","title":"Scene Format","text":"<p>The theme has a few different sections:</p> <ul> <li><code>#info</code>: Info about the theme</li> <li><code>#base</code>: The base element, which every gui element in the theme inherits from</li> <li><code>#pallet</code>: Predefined colours for the theme.</li> <li><code>#resources</code>: Images the theme uses, can either be an atlas or individual images.</li> <li><code>#elements</code>: Reusable elements that different scenes in your theme can use.</li> <li>scenes: Scenes that the gui uses</li> </ul> <p>It also uses a template system for the text, so that the gui elements automatically update as the text changes.</p>"},{"location":"contribute/gui/theme-engine/#element-inheritence-order","title":"Element Inheritence Order:","text":"<p>The order that elemets get their values is defined as:</p> <p>element -&gt; scene <code>#base</code> -&gt; global <code>#base</code></p> <p>If you use a reusable element the order is:</p> <p>element -&gt; element <code>#element</code> -&gt; scene <code>#base</code> -&gt; global <code>#base</code></p>"},{"location":"contribute/gui/theme-engine/#element-overrides","title":"Element overrides","text":"<p>You can override values in elements based on hardware by specifying a hardware capabilities on an attribute:</p> <pre><code>    \"#base\": {\n        \"font\": \"DejaVuSans.ttf\",\n        \"font-scale[hires]\": 2.0,\n        \"font-scale[5:3,hires]\": 3.0\n    },\n</code></pre> <p>You can override entire elements based on hardware capabilities:</p> <pre><code>        \"ports_list\": {\n            \"area\": [0.0, 0.1, 0.4, 0.95],\n            \"border-x\": 16,\n            \"roundness\": 10,\n            \"font-size\": 14,\n            \"font-color\": \"list_text\",\n            \"select-color\": \"list_selected\",\n            \"text-clip\": true,\n            \"text-wrap\": false,\n            \"autoscroll\": \"slide\",\n            \"scroll-speed\": 30,\n            \"scroll-delay-start\": 500,\n            \"scroll-delay-end\":   500\n        },\n        \"ports_list[hires]\": {\n            \"area\": [0.0, 0.1, 0.3, 0.95]\n        },\n</code></pre> <p>Since this uses the capabilities system used in ports you can add them together and or not them.</p> <p>Currently the capabilities are:</p> <ul> <li><code>hires</code>: devices with a screen resolution greater than 640:480</li> <li><code>lowres</code>: devices with a screen resolution smaller then 640:480</li> <li><code>power</code>: any device above an <code>rk3326</code> cpu.</li> <li><code>opengl</code>: any device with <code>OpenGL</code>, not OpenGLES.</li> <li><code>wide</code>: any aspect ratio above 4:3</li> <li><code>3:2</code>: aspect ratio of 3:2</li> <li><code>4:3</code>: aspect ratio of 4:3</li> <li><code>5:3</code>: aspect ratio of 5:3</li> <li><code>16:9</code>: aspect ratio of 16:9</li> <li><code>427:240</code>: aspect ratio of 427:240 (ogs/ogu &amp; friends)</li> <li><code>480x320</code>: screen resolution of 480x320</li> <li><code>640x480</code>: screen resolution of 640x480</li> <li><code>854x480</code>: screen resolution of 854x480</li> <li><code>960x544</code>: screen resolution of 960x544</li> <li><code>1280x720</code>: screen resolution of 1280x720</li> <li><code>1920x1152</code>: screen resolution of 1920x1152</li> <li><code>language</code>: the current language (en_US, de_DE, es_ES, fr_FR, it_IT, and pl_PL)</li> </ul> <p>You can combine them like so:</p> <ul> <li><code>!lowres|hires</code>: must be exactly 640:480</li> </ul>"},{"location":"contribute/gui/theme-engine/#scenes","title":"Scenes","text":"<p>Scenes can define their own <code>#base</code> element, which will cause all elements in that scene to inherit from.</p> <p>Currently there are the following scenes:</p> <ul> <li><code>main_menu</code>: The main menu</li> <li><code>option_menu</code>: Options screen</li> <li><code>ports_list</code>: The list of ports</li> <li><code>filter_list</code>: Filter scene that pops up over the ports_list scene.</li> <li><code>port_info</code>: Detailed port information.</li> <li><code>port_info_popup</code>: A popup scene that displays above the <code>port_info</code> scene</li> <li><code>message_window</code>: A scrolling list of messages, used during downloading, installation, and fetching the latest ports information.</li> <li><code>message_box</code>: An alert box</li> <li><code>themes_list</code>: Theme manager scene.</li> <li><code>runtime_list</code>: Runtime manager scene.</li> </ul>"},{"location":"contribute/gui/theme-engine/#scene-main_menu","title":"Scene: main_menu","text":"<p>This is the main menu scene, it requires the <code>option_list</code> element. It is the first scene to load and if backed out of will quit the program.</p> <pre><code>    \"main_menu\": {\n        \"option_list\": {\n            \"area\": [ 0.0, 0.0, 1.0, 1.0 ],\n            \"font\": \"DejaVuSans.ttf\",\n            \"font-size\": 10,\n            \"list\": []\n        },\n        \"button_bar\": {\n            \"area\": [ 0.0, 8.0, 1.0, 1.0 ],\n            \"font\": \"DejaVuSans.ttf\",\n            \"font-size\": 10,\n            \"bar\": []\n        }\n    }\n</code></pre> <p>The option_list can contain whatever text you feel is most appropriate, the actual option that gets called is the same option in the <code>option</code> list.</p>"},{"location":"contribute/gui/theme-engine/#scene-options_menu","title":"Scene: options_menu","text":"<p>This is the options menu scene, it requires the <code>option_list</code> element. It is loaded from main-menu, this scene is reused for each subsequent option submenu.</p> <pre><code>    \"options_menu\": {\n        \"option_list\": {\n            \"area\": [ 0.0, 0.0, 1.0, 1.0 ],\n            \"font\": \"DejaVuSans.ttf\",\n            \"font-size\": 10,\n            \"list\": []\n        },\n        \"button_bar\": {\n            \"area\": [ 0.0, 8.0, 1.0, 1.0 ],\n            \"font\": \"DejaVuSans.ttf\",\n            \"font-size\": 10,\n            \"bar\": []\n        }\n    }\n</code></pre>"},{"location":"contribute/gui/theme-engine/#scene-ports_list","title":"Scene: ports_list","text":"<p>This is the main list of ports, it requires the <code>ports_list</code> element. It is loaded from main-menu, this scene is reused for listing ports for installing and uninstalling.</p> <pre><code>    \"ports_list\": {\n        \"ports_list\": {\n            \"area\": [ 0.0, 0.0, 1.0, 1.0 ],\n            \"font\": \"DejaVuSans.ttf\",\n            \"font-size\": 10,\n            \"list\": []\n        },\n        \"button_bar\": {\n            \"area\": [ 0.0, 8.0, 1.0, 1.0 ],\n            \"font\": \"DejaVuSans.ttf\",\n            \"font-size\": 10,\n            \"bar\": []\n        }\n    }\n</code></pre>"},{"location":"contribute/gui/theme-engine/#elements","title":"Elements","text":""},{"location":"contribute/gui/theme-engine/#the-basics","title":"The basics","text":"<p>Elements are always rectangles, they must always have an <code>area</code> parameter. This can be pixels specifically, or a percentage of the parent area.</p> <p>If you specify negative pixels for the width/height it subtracts it from the width/height of the parent area.</p> <p>If you specify the coordinates in pixels it is in thef format: <code>x, y, width, height</code></p> <p>If you specify it as a percentage of the parent area it is as: <code>top-left-x, top-left-y, bottom-right-x, bottom-right-y</code></p> <pre><code>    \"get_rect_perc\": {\n        // 25%, 25% to 75%, 75%\n        \"area\": [0.25, 0.25, 0.75, 0.75]\n    },\n\n    \"get_rect_px\": {\n        // same as above on a 640x480 display\n        \"area\": [160, 120, 320, 240]\n    },\n\n    \"get_rect_inset\": {\n        // same as above on a 640x480 display\n        \"area\": [160, 120, -160, -120]\n    },\n</code></pre> <p>As hinted to above, you can specify a parent element to use as the basis of the calculating element positions.</p> <pre><code>        \"left_pane\": {\n            // [0, 0, 192, 480] on 640x480 display\n            \"area\": [ 0.0, 0.0, 0.3, 1.0 ]\n        },\n        \"right_pane\": {\n            // [192, 0, 448, 480] on 640x480 display\n            \"area\": [ 0.3, 0.0, 1.0, 1.0 ]\n        },\n        \"port_info_image_area\": {\n            // [202, 10, 236, 230] using the above right_pane as the basis\n            \"parent\": \"right_pane\",\n            \"area\": [ 10, 10, -10, 0.5 ]\n        },\n        \"port_info_text_area\": {\n            // [202, 240, 236, 230] using the above right_pane as the basis\n            \"parent\": \"right_pane\",\n            \"area\": [ 10, 0.5, -10, -10 ]\n        },\n</code></pre> <p>By mixing and matching these you can build very powerful layouts.</p> <p>You can also use the element overrides to further customise for different screen sizes.</p> <pre><code>        \"left_pane\": {\n            \"area\": [ 0.0, 0.0, 0.3, 1.0 ],\n            \"area[wide]\": [ 0.0, 0.0, 0.4, 1.0 ]\n        },\n        \"right_pane\": {\n            \"area\": [ 0.3, 0.0, 1.0, 1.0 ],\n            \"area[wide]\": [ 0.4, 0.0, 1.0, 1.0 ]\n        },\n</code></pre> <p>Elements can be themed by setting a <code>fill</code>, <code>outline</code>, <code>thickness</code>, and <code>roundness</code>:</p> <ul> <li><code>fill</code>: the color to fill in the elements rect</li> <li><code>outline</code>: the color of the outline for the elements rect</li> <li><code>thickness</code>: how thick the stroke of the outline is</li> <li><code>roundess</code>: if sdlGFX is available, it will make a roundrect with x pixels of roundness in the corners.</li> <li><code>progress-fill</code>: this is a special fill colour, used for the progress bar.</li> </ul>"},{"location":"contribute/gui/theme-engine/#displaying-text","title":"Displaying Text","text":"<p>Currently there are a few ways of displaying text.</p> <p>To display text at a minimum you need a <code>font</code>, <code>font-size</code>, <code>font-color</code>, and <code>text</code>.</p> <pre><code>    \"text_element\": {\n        \"area\": [0.25, 0.25, 0.75, 0.75],\n        \"text\": \"Text to be displayed!\",\n        \"font\": \"DejaVuSans.ttf\",\n        \"font-size\": 20,\n        \"font-color\": [0, 0, 0]\n    }\n</code></pre> <p>A special option is <code>font-scale</code> which should be used to broadly scale fonts across multiple elements or scenes using the element overrides.</p> <pre><code>    \"#base\": {\n        \"font-scale[hires]\": 2.0,\n    }\n</code></pre> <p>You can align text to different positions of the element.</p> <ul> <li><code>topleft</code></li> <li><code>topcenter</code></li> <li><code>topright</code></li> <li><code>midleft</code></li> <li><code>center</code></li> <li><code>midright</code></li> <li><code>bottomleft</code></li> <li><code>bottomcenter</code></li> <li><code>bottomright</code></li> </ul> <p>You can control the way text is displayed with word wrapping, automatic scrolling, clipping, and scaling.</p> <ul> <li>shrink/grow the text to fill the region: <code>\"text-clip\": false</code></li> <li>clip the text and just show what is visible: <code>\"text-clip\": true</code></li> <li>word wrap the text if it is too wide for the area provided: <code>\"text-wrap\": true</code></li> </ul> <p>It also supports text auto-scrolling if it doesnt fit within the area it is displayed. It will horizontally scroll if the text is wider (word wrap is off), and vertically scroll if it is too tall (word-wrap is on).</p> <pre><code>    \"element_name\": {\n        // Other element bits and bobs here.\n\n        \"text-clip\": true,          // This must be true for scrolling to work\n        \"text-wrap\": false,         // If text-wrap is false, it will default to a horizontal scroll, otherwise it defaults to a vertical scroll\n\n        \"autoscroll\": \"slide\",      // null does nothing, \"slide\" scrolls down then resets, \"marquee\" scrolls back and forth\n\n        \"scroll-speed\": 30,         // How many miliseconds between each scrolling step\n        \"scroll-delay-start\": 500,  // How many miliseconds to wait before starting to scroll\n        \"scroll-delay-end\":   500,   // How many miliseconds to wait at the end of scrolling\n\n        \"scroll-direction\": \"horizontal\" // override the defaults assumed based on text-wrap\n    }\n</code></pre>"},{"location":"contribute/gui/theme-engine/#images","title":"Images","text":"<p>Probably should write something here.</p>"},{"location":"contribute/gui/theme-engine/#lists","title":"Lists","text":"<p>The list system is quite adequate</p>"},{"location":"contribute/gui/theme-engine/#basic-presentation-options","title":"Basic presentation options","text":"<pre><code>    \"element_name\": {\n        \"select-color\":    [255, 128, 128],  // color to draw the selected item as\n        \"select-fill\":     [128, 128, 128],  // color to fill behind the selected item\n        \"alt-fill\":        [210, 210, 210],  // color to fill alternating rows\n        \"no-select-color\": [128, 128, 128],  // color to draw text on unselectable rows.\n        \"no-select-fill\":  [210, 210, 210],  // color to fill on unselectable rows.\n        \"inactive-select-color\": [128,  64,  64],  // color to draw the selected item if the element is inactive\n    }\n</code></pre>"},{"location":"contribute/gui/theme-engine/#pointer","title":"Pointer","text":"<pre><code>    \"element_name\": {\n        \"pointer\": \"pointer.png\",                 // pointer image\n        \"pointer-align\": [\"midright\", \"midleft\"], // poisition of (1) list/text to attach the position (2) of the pointer to\n        \"pointer-size\": [128, 64],                // scale it to this size, otherwise use the size of the image provided\n        \"pointer-attach\": \"text\",                 // attach to the rendered \"text\" rect, or the \"list\" item rect.\n        \"pointer-offset\": [0, 0],                 // offset it by x,y pixels after the position is calculated.\n        \"pointer-flip-x\": false,                  // flip the image horizontally\n        \"pointer-flip-y\": false,                  // flip it vertically\n        \"pointer-mirror\": false,                  // mirror the pointer and display on the other side of the list item\n        \"pointer-mirror-x\": false,                // flip the mirrored pointer horizontally\n        \"pointer-mirror-y\": false,                // flip the mirrored pointer vertically\n    }\n</code></pre>"},{"location":"contribute/gui/theme-engine/#config","title":"<code>#config</code>","text":"<p>The <code>#config</code> section in a scene is used for changing the behaviour of a scene, currently it is only used for setting button mappings in the <code>port_info</code> and <code>port_info_popup</code> scenes, but will be expanded as needed.</p> <p>By default the <code>port_info</code> scene is defined as:</p> <pre><code>    \"port_info\": {\n        \"#config\": {\n            \"buttons\": {\n                \"UP\": \"prev_port\",\n                \"DOWN\": \"next_port\"\n            }\n        }\n    }\n</code></pre> <p>However if a <code>port_info_popup</code> is present it will default to this:</p> <pre><code>    \"port_info\": {\n        \"#config\": {\n            \"buttons\": {\n                \"LEFT\": \"prev_port\",\n                \"RIGHT\": \"next_port\",\n                \"UP\": \"port_info_popup\"\n            }\n        }\n    },\n\n    \"port_info_popup\": {\n        \"#config\": {\n            \"buttons\": {\n                \"DOWN\": \"pop_scene\"\n            }\n        }\n    }\n</code></pre> <p>The code will automatically set the buttons for the button bar. The actions <code>prev_port</code> and <code>next_port</code> do not add to the button bar to stop if from being crowded.</p> <p>Currently the only actions are:</p> <ul> <li><code>prev_port</code></li> <li><code>next_port</code></li> <li><code>port_info_popup</code></li> <li><code>pop_scene</code></li> </ul> <p>More will be added as required.</p>"},{"location":"contribute/gui/theme-engine/#special-words","title":"Special Words","text":"<p>Within the templating system we have special words for things like button bindings and checkboxes. They are used for showing buttons and actions, and checkboxes.</p> <p>It is possible to either override these special words with text, or replace them with an image.</p> Special Word Description <code>_A</code> Button A <code>_B</code> Button B <code>_X</code> Button X <code>_Y</code> Button Y <code>_UP</code> Button UP <code>_DOWN</code> Button DOWN <code>_LEFT</code> Button LEFT <code>_RIGHT</code> Button RIGHT <code>_START</code> Button START <code>_SELECT</code> Button SELECT <code>_L</code> Button L <code>_R</code> Button R <code>_CHECKED</code> Checked item in a list <code>_UNCHECKED</code> Unchecked item in a list <p>To replace the words with text you can simply add the following to your theme, like used in the <code>basic_theme</code>:</p> <pre><code>    \"#override\": {\n        \"_A\":         \"A:\",\n        \"_B\":         \"B:\",\n        \"_X\":         \"X:\",\n        \"_Y\":         \"Y:\",\n        \"_UP\":        \"UP:\",\n        \"_DOWN\":      \"DOWN:\",\n        \"_LEFT\":      \"LEFT:\",\n        \"_RIGHT\":     \"RIGHT:\",\n        \"_START\":     \"START:\",\n        \"_SELECT\":    \"SELECT:\",\n        \"_L\":         \"L\",\n        \"_R\":         \"R\",\n        \"_CHECKED\":   \"[x]\",\n        \"_UNCHECKED\": \"[  ]\",\n    }\n</code></pre> <p>To replace them with images you will need to load either images and use name to override the image name, or use an image atlas like in the <code>default_theme</code>.</p> <pre><code>    \"#resources\": {\n        \"buttons.png\": {\n            \"atlas\": {\n                \"_A\":         [  0,   0, 180, 180],\n                \"_B\":         [180,   0, 180, 180],\n                \"_X\":         [360,   0, 180, 180],\n                \"_Y\":         [540,   0, 180, 180],\n                \"_UP\":        [900, 360, 180,  90],\n                \"_DOWN\":      [900, 450, 180,  90],\n                \"_LEFT\":      [900, 180,  90, 180],\n                \"_RIGHT\":     [990, 180,  90, 180],\n                \"_START\":     [  0, 180, 360, 180],\n                \"_SELECT\":    [360, 180, 360, 180],\n                \"_L\":         [  0, 360, 270, 180],\n                \"_R\":         [270, 360, 270, 180],\n                \"_CHECKED\":   [900,   0, 180, 180],\n                \"_UNCHECKED\": [720,   0, 180, 180]\n            }\n        }\n    }\n</code></pre>"},{"location":"contribute/gui/theme-engine/#text-template-system","title":"Text Template System","text":"<p>PortMaster has a simple text templating engine, it supports tags and if/then/else statements.</p> <p>You can use the tags in text areas and they will automatically update as their value changes.</p> <p>An example of using the system.time_24hr tag: <pre><code>    {\n        // Element options\n        \"text\": \"{system.time_24hr}\"\n    }\n</code></pre></p> <p>If no data is found for a tag the tag name is returned.</p> <pre><code>    {\n        // This will display \"{system.unknown_tag}\"\n        \"text\": \"{system.unknown_tag}\"\n    }\n</code></pre> <p>Obviously multiple tags can be used at once:</p> <pre><code>    {\n        // This might display \"ArkOS (07232023)\" on ArkOS for example\"\n        \"text\": \"OS: {system.cfw_name} ({system.cfw_version})\"\n    }\n</code></pre> <p>As mentioned above you can use if/then/else statements in the text:</p> <pre><code>    {\n        // If port_info.runtime is not false it will display \"\\nRuntime: {}\"\n        \"text\": \"{if:port_info.runtime}\\nRuntime: {port_info.runtime} ({port_info.runtime_status}){else}No Runtime Required{endif}\"\n    }\n</code></pre> <p>You can even compare two tags text:</p> <pre><code>    {\n        // if ports_list.total_ports doesnt equal ports_list.filter_ports\n        \"text\": \"{if:!ports_list.total_ports::ports_list.filtered}{ports_list.filter_ports} / {ports_list.total_ports}{else}{ports_list.total_ports}{endif}\"\n    }\n</code></pre> <p>The format is:</p> <p><code>{if:[!]&lt;KEYNAME&gt;[:&lt;EQUALS TEXT&gt;[:OTHER KEY]]}&lt;TRUTH TEXT&gt;[{else}&lt;ELSE TEXT&gt;]{endif}</code></p>"},{"location":"contribute/gui/theme-engine/#hopefully-this-helps-if-not-oh-well-i-will-write-it-better-later-on","title":"Hopefully this helps, if not... oh well i will write it better later on.","text":"Tag Result <code>{if:!port_info.runtime}</code> <code>port_info.runtime</code> != \"\" <code>{if:port_info.runtime}</code> <code>port_info.runtime</code> == \"\" <code>{if:port_info.runtime:Mono 6.12.0.122}</code> <code>port_info.runtime</code> == \"Mono 6.12.0.122\" <code>{if:!port_info.runtime:Mono 6.12.0.122}</code> <code>port_info.runtime</code> != \"Mono 6.12.0.122\" <code>{if:ports_list.total_ports::ports_list.filter_ports}</code> <code>ports_list.total_ports</code> == <code>ports_list.filter_ports</code> <code>{if:!ports_list.total_ports::ports_list.filter_ports}</code> <code>ports_list.total_ports</code> != <code>ports_list.filter_ports</code>"},{"location":"contribute/gui/theme-engine/#system-tags","title":"System tags","text":"<ul> <li>system.time_24hr</li> <li>system.time_12hr</li> <li>system.free_space</li> <li>system.used_space</li> <li>system.cfw_name</li> <li>system.cfw_version</li> <li>system.device_name</li> <li>system.battery_level</li> <li> <p>system.ip_address</p> </li> <li> <p>system.progress_text</p> </li> <li> <p>system.progress_amount</p> </li> <li> <p>system.progress_perc_5</p> </li> <li>system.progress_perc_10</li> <li>system.progress_perc_20</li> <li>system.progress_perc_25</li> <li>system.progress_spinner_5</li> <li>system.progress_spinner_10</li> <li>system.progress_spinner_20</li> <li>system.progress_spinner_25</li> <li>system.progress_perc_5_or_spinner</li> <li>system.progress_perc_10_or_spinner</li> <li>system.progress_perc_20_or_spinner</li> <li>system.progress_perc_25_or_spinner</li> </ul>"},{"location":"contribute/gui/theme-engine/#port-info-tags","title":"Port info tags","text":"<ul> <li>port_info.name</li> <li>port_info.image</li> <li>port_info.title</li> <li>port_info.description</li> <li>port_info.instructions</li> <li>port_info.genres</li> <li>port_info.porter</li> <li>port_info.ready_to_run</li> <li>port_info.download_size</li> <li>port_info.runtime</li> <li>port_info.runtime_status</li> </ul>"},{"location":"contribute/gui/theme-engine/#ports-list-tags","title":"Ports List tags","text":"<ul> <li>ports_list.total_ports</li> <li>ports_list.filter_ports</li> <li>ports_list.filters</li> </ul>"},{"location":"contribute/gui/theme-engine/#theme-info-tags","title":"Theme info tags","text":"<ul> <li>theme_info.image</li> <li>theme_info.name</li> <li>theme_info.description</li> <li>theme_info.creator</li> <li>theme_info.status</li> </ul>"},{"location":"contribute/gui/theme-engine/#control-flow-of-portmaster","title":"Control flow of PortMaster","text":"<pre><code>Main:\n  -&gt; Install Menu\n  -&gt; Uninstall Menu -&gt; Port List [Installed filter]\n  -&gt; Options\n  -&gt; Quit\n\nInstall Menu:\n  -&gt; All Ports    -&gt; Port List [No filter]\n  -&gt; Ready To Run -&gt; Port List [RTR filter]\n\n  -&gt; Lists 1      -&gt; Custom List\n  -&gt; Lists 2      -&gt; Custom List\n  -&gt; Lists 3      -&gt; Custom List\n  -&gt; Lists 4      -&gt; Custom List\n\n  -&gt; Back\n\nPort List:\n  -&gt; List of Ports\n    -&gt; Inspect\n    -&gt; Back\n\nOptions:\n  -&gt; TBD.\n  -&gt; Back\n\nInspect:\n  -&gt; Install/Re-Install or Uninstall\n  -&gt; Back\n\nInstall/Uninstall:\n  -&gt; Message Screen\n  -&gt; Back\n</code></pre>"},{"location":"contribute/gui/translation/","title":"Help Translate PortMaster","text":"<p>Want to see PortMaster in your language? Join our translation efforts on  Crowdin and contribute to making PortMaster more accessible worldwide!</p> <p> Translate PortMaster on Crowdin</p> <p>Info</p> <p>Please let us know on our Discord server if you are working on translations.</p>"},{"location":"contribute/porting/build-environments/","title":"Compiling Opensource Games for PortMaster","text":"<p>Since PortMaster is platform-independent and delivers its own dependencies, we don't rely on the build mechanism of the CFWs out there. To compile games for the AARCH64 architecture, you can do so in various ways. Most of the porters build on Ubuntu 20.04, this relatively old version is required to prevent issues with glibc requirements on some CFW's.</p> <p>Info</p> <p>Many porting methods do not require you to set up a build environment. This is only necessary when you need to build games and/or libraries from source!</p>"},{"location":"contribute/porting/build-environments/#build-environment-options","title":"Build environment options","text":"<p>Below you will find several options for build environments suited for PortMaster.</p>"},{"location":"contribute/porting/build-environments/#1-wsl2-chroot-change-root","title":"1. WSL2 Chroot (Change root)","text":"<p>For more information, visit the GitHub Repository.</p>"},{"location":"contribute/porting/build-environments/#instructions","title":"Instructions","text":"<p>Install required packages on Ubuntu 20.04/22.04 LTS WSL 2:</p> <pre><code>sudo apt install build-essential binfmt-support daemonize libarchive-tools qemu-system qemu-user qemu-user-static gcc-aarch64-linux-gnu g++-aarch64-linux-gnu\n</code></pre> <ul> <li> <p>Download 20.04 Focal server-cloudimg-arm64-wsl.rootfs.tar.gz from  Ubuntu Cloud Image.</p> </li> <li> <p>Extract the tarball in a folder:</p> <pre><code>mkdir folder\nsudo bsdtar -xpf ubuntu-20.04-server-cloudimg-arm64-wsl.rootfs.tar.gz -C folder\n</code></pre> </li> <li> <p>Copy qemu static binary into that folder:</p> <pre><code>sudo cp /usr/bin/qemu-aarch64-static folder/usr/bin\n</code></pre> </li> <li> <p>Start systemd with daemonize:</p> <pre><code>sudo daemonize /usr/bin/unshare -fp --mount-proc /lib/systemd/systemd --system-unit=basic.target\n</code></pre> </li> <li> <p>Check if AARCH64 binfmt entry is present:</p> <pre><code>ls /proc/sys/fs/binfmt_misc/\n</code></pre> </li> <li> <p>Mount and chroot into the environment:</p> <pre><code>sudo mount -o bind /proc folder/proc\nsudo mount -o bind /dev folder/dev\nsudo chroot folder qemu-aarch64-static /bin/bash\n</code></pre> </li> <li> <p>In the chroot, delete /etc/resolv.conf file and write a name server to it.</p> <pre><code>rm /etc/resolv.conf\necho \"nameserver 8.8.8.8\" &gt; /etc/resolv.conf\n</code></pre> </li> <li> <p>Exit chroot</p> <pre><code>```bash\nmkdir -p folder/tmp/.X11-unix\n```\n</code></pre> </li> <li> <p>Create chroot.sh:</p> <pre><code>#!/bin/bash\n\nsudo daemonize /usr/bin/unshare -fp --mount-proc /lib/systemd/systemd --system-unit=basic.target\n\nsudo mount -o bind /proc folder/proc\nsudo mount -o bind /dev folder/dev\nsudo mount -o bind /tmp/.X11-unix folder/tmp/.X11-unix\nxhost + local:\nsudo chroot folder qemu-aarch64-static /bin/bash\n</code></pre> </li> <li> <p>Make the chroot.sh executable:</p> <pre><code>chmod +x chroot.sh\n</code></pre> </li> <li> <p>Chroot into the new environment:</p> <pre><code>sudo ./chroot.sh\n</code></pre> </li> <li> <p>Update &amp; Upgrade the chroot:</p> <pre><code>apt-get update &amp;&amp; apt-get upgrade \n</code></pre> </li> <li> <p>Helpful development tools &amp; libraries to have in the chroot:</p> <pre><code>apt-get install --no-install-recommends build-essential git wget libdrm-dev python3 python3-pip python3-setuptools python3-wheel ninja-build libopenal-dev premake4 autoconf      libevdev-dev ffmpeg libboost-tools-dev magics++ libboost-thread-dev libboost-all-dev pkg-config zlib1g-dev libsdl-mixer1.2-dev libsdl1.2-dev libsdl-gfx1.2-dev libsdl2-mixer-dev clang cmake cmake-data libarchive13 libcurl4 libfreetype6-dev librhash0 libuv1 mercurial mercurial-common libgbm-dev libsdl-image1.2-dev\n</code></pre> </li> <li> <p>Install custom SDL2 Libraries for better compatibility:</p> <pre><code>rm /usr/lib/aarch64-linux-gnu/libSDL2.* \nrm -rf /usr/lib/aarch64-linux-gnu/libSDL2-2.0.so*\n\nwget https://github.com/libsdl-org/SDL/archive/refs/tags/release-2.26.2.tar.gz\n./configure --prefix=/usr\nmake -j8\nmake install\n\n/sbin/ldconfig\n</code></pre> </li> </ul>"},{"location":"contribute/porting/build-environments/#2-docker","title":"2. Docker","text":"<p>Multi Arch compilation with this Docker Guide</p>"},{"location":"contribute/porting/build-environments/#3-aarch64-chroot-development-vm-by-christian","title":"3. AARCH64 chroot development VM by Christian","text":"<p>This is a Virtual Box VM with two chroot instances (AARCH64 &amp; ARMHF).</p> <p>For More Info: Forum Post</p>"},{"location":"contribute/porting/build-environments/#getting-into-chroots","title":"Getting Into Chroots:","text":"<ul> <li> <p>For 32-bit Arm environment:</p> <p><pre><code>sudo chroot /mnt/data/armhf/\n</code></pre>   or create an Arm32 shortcut on the desktop GUI and click on it.</p> </li> <li> <p>For 64-bit Arm environment:</p> <p><pre><code>sudo chroot /mnt/data/arm64/\n</code></pre>   or create an Arm64 shortcut on the desktop GUI and click on it.</p> </li> </ul>"},{"location":"contribute/porting/build-environments/#helpful-tools-to-install","title":"Helpful Tools to Install:","text":"<pre><code>apt -y install build-essential git wget libdrm-dev python3 python3-pip python3-setuptools python3-wheel ninja-build libopenal-dev premake4 autoconf libevdev-dev ffmpeg libsnappy-dev libboost-tools-dev magics++ libboost-thread-dev libboost-all-dev pkg-config zlib1g-dev libpng-dev libsdl2-dev clang cmake cmake-data libarchive13 libcurl4 libfreetype6-dev libjsoncpp1 librhash0 libuv1 mercurial mercurial-common libgbm-dev libsdl2-ttf-2.0-0 libsdl2-ttf-dev \n</code></pre>"},{"location":"contribute/porting/build-environments/#4-create-your-own-chroot","title":"4. Create Your Own chroot","text":"<p>As per this guide.</p>"},{"location":"contribute/porting/build-environments/#5-cross-compiling-tools-for-aarch64","title":"5. Cross-Compiling Tools for AARCH64","text":"<p>With the arm64 SDL2 library, etc.</p>"},{"location":"contribute/porting/developer-details/","title":"Developer Details","text":""},{"location":"contribute/porting/developer-details/#portmaster-developer-license-permission-overview","title":"PortMaster Developer License &amp; Permission Overview","text":"<p>Each PortMaster package has all necessary permission and license files included.</p> <p>If you have any questions feel free to contact the PortMaster Crew in our discord or via contact@portmaster.games</p>"},{"location":"contribute/porting/developer-details/#developer-asset-distribution-permissions","title":"Developer Asset Distribution Permissions:","text":"# Developer Link Engine Notes 1 Kultisti itch.io GMS 2 Gizmo itch.io GMS 3 Jon Topielski itch.io Godot 4 Bippinbits itch.io Godot Specific games only 5 Edgar Mendoza itch.io Godot 6 Cyfo itch.io Love2d 7 Juho itch.io Godot Missing license file 8 Harley Wilson itch.io GMS 9 Bananamanhatguy itch.io Godot 10 Team Bugulon itch.io GMS 11 Maybell itch.io GMS, Godot 12 ItsGeppy itch.io Godot Unclear license 13 ElgatoPanzon itch.io Godot 14 Blasin itch.io Love2d 15 LucasMegaStriker itch.io Godot 16 Vlambeer vlambeer.com GMS Specific games only 17 Aiwi itch.io Godot Specific games only 18 Nozomu itch.io Godot 19 Bucketfish itch.io Godot 20 Aarjvark Steam GMS Specific games only 21 Nabo itch.io GMS 22 Evan12811 itch.io Godot 23 Yousfi M Walid itch.io GMS 24 Steven Miller itch.io GMS 25 Pixel Archipel itch.io GMS, Godot 26 Yozoraki itch.io GMS 27 Suitgames suitgames.com GMS 28 Fred Wood itch.io GMS 29 Bagelcollie itch.io GMS, Godot 30 Red Screen Soft Red Screen Soft GMS 31 Case Portman itch.io GMS 32 Sunshine_Error itch.io GMS 33 Linky439 itch.io GMS 33 Justin Bohemier wixsite.com  GMS Missing license file"},{"location":"contribute/porting/developer-details/#open-source-developer-permissions","title":"Open Source Developer Permissions:","text":"# Dev Name Link Engine Notes 1 HarmonyHoney GitHub Godot 2 Team Potato GitLab Godot 3 Wesley Werner GitHub Love2d 4 Jayden Sipe GitHub Godot 5 Joel Chrono GitHub Godot 6 Escada Games GitHub Godot 7 Levrault GitHub Godot 8 Joh-Dev GitHub Godot 9 Clarkjohn GitHub Godot 10 John Gabriel Bitbucket Godot 11 Tangram Games GitHub Love2d 12 TheJeme GitHub Love2d 13 FoppyGames GitHub Love2d 14 Dulsi GitHub Godot 15 Fuzzyzilla GitHub Godot 16 Yolwoocle GitHub Love2d 17 a327ex GitHub Love2d 18 Rafael Bordoni itch.io Godot 19 Flamendless GitHub Love2d 20 Joyrider GitHub SDL 21 Locomalito locomalito.com GMS 22 ProfPotanildo itch.io Love2d"},{"location":"contribute/porting/developer-details/#denied-do-not-contact-again","title":"DENIED, DO NOT CONTACT AGAIN:","text":"# Dev Name Link Notes 1 Securas itch.io Do not contact again"},{"location":"contribute/porting/packaging/","title":"Packaging Ports for PortMaster","text":"<p>To release a Port on PortMaster we have some guidelines that need to be followed:</p>"},{"location":"contribute/porting/packaging/#port-structure","title":"Port Structure:","text":"<p>Ports are now contained within the <code>port</code> top level directory, each port has its own sub-directory named after the port itself. Each port must adhere to the <code>portname</code> rules stated above. Each port must have a <code>port.json</code>, <code>screenshot.{jpg,png}</code>, <code>README.md</code>, <code>gameinfo.xml</code>, a port script and a port directory. It may optionally include a <code>cover.{jpg,png}</code>.</p> <p>The script should have capital letters (like <code>Port Name.sh</code>) and must end in <code>.sh</code>, the port directory should be the same as the containing directory. Some legacy ports have different names, new ports won't be accepted unless they follow the new convention.</p> <p>Scripts and port directories must be unique across the whole project, checks will be run to ensure this is right.</p> <p>A port directory might look like the following:</p> <pre><code>portname/\n\u251c\u2500\u2500 port.json\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 screenshot.jpg\n\u251c\u2500\u2500 gameinfo.xml\n\u251c\u2500\u2500 cover.jpg (Optional)\n\u251c\u2500\u2500 Port Name.sh\n\u2514\u2500\u2500 portname/\n    \u251c\u2500\u2500 licenses/\n    \u2502   \u2514\u2500\u2500 LICENSE Files\n    \u2514\u2500\u2500 &lt;portfiles here&gt;\n</code></pre>"},{"location":"contribute/porting/packaging/#portname","title":"portname","text":"<ul> <li> <p>The portname must start with either a lowercase letter (a-z) or a number (0-9).</p> </li> <li> <p>You can then have a combination of lowercase letters (a-z), numbers (0-9), periods (.), or underscores (_).</p> </li> <li> <p>There is no limit on the length of the name, but keep it short.</p> </li> <li> <p>This name must not clash with any other existing ports.</p> </li> </ul>"},{"location":"contribute/porting/packaging/#portjson","title":"port.json","text":"<p>This is used by portmaster, this should include all the pertinent info for the port, we have a handy port.json generator here. Make sure to select the correct architecture. If the game is using a runtime e.g. Godot/Mono/Java no arch needs to be entered.</p> <p>Example from 2048.</p> <pre><code>{\n    \"version\": 2,\n    \"name\": \"2048.zip\",\n    \"items\": [\n        \"2048.sh\",\n        \"2048\"\n    ],\n    \"items_opt\": null,\n    \"attr\": {\n        \"title\": \"2048\",\n        \"desc\": \"The 2048 puzzle game\",\n        \"inst\": \"Ready to run.\",\n        \"genres\": [\n            \"puzzle\"\n        ],\n        \"porter\": [\n            \"Christian_Haitian\"\n        ],\n        \"image\": {},\n        \"rtr\": true,\n        \"runtime\": null,\n        \"reqs\": [],\n        \"arch\": [\n            \"aarch64\",\n            \"armhf\"\n        ]\n    }\n}\n</code></pre>"},{"location":"contribute/porting/packaging/#readmemd","title":"README.md","text":"<p>This adds additional info for the port on the wiki, we have a handy README.md generator here. Please always add a dedicated thank you note for the developer/creator. Without these people we would not be here. </p> <p>Example:</p> <pre><code>    ## Notes\n    Thanks to the [Alien Blaster Team](https://www.schwardtnet.de/alienblaster/) for creating this game and making it available for free!\n\n    ## Controls\n\n    | Button | Action |\n    |--|--| \n    |A| Special Weapon|\n    |B| Main Weapon|\n    |X| Swap Weapon|\n    |Y| Spwap Special Weapon |\n    |R1| Key \"1\" |\n\n\n    ## Compile\n\n    ```\n    wget http://www.schwardtnet.de/alienblaster/archives/alienblaster-1.1.0.tgz\n    cd alienblaster-1.1.0\n    make\n    ```\n</code></pre>"},{"location":"contribute/porting/packaging/#screenshotpng","title":"screenshot.png","text":"<p>For use in the PortMaster GUI aswell as for the Wiki we need a screenshot of the gameplay or main function of the Port. The screenshot has to be exactly 640x480 in dimensions and format can either be .jpg or .png</p> <p>You can use these scripts to capture either screenshots or videos on your device. Depending on your device you might need to adjust the width and height values.</p>"},{"location":"contribute/porting/packaging/#gameinfoxml-coverpng","title":"gameinfo.xml &amp; cover.png","text":"<p>Portmaster installs Metadata including a cover to emulationstation upon a Port install. For this we use a custom gameinfo.xml with all the data needed for Emulationstation and a cover file.</p> <p>The Coverfile should always show gameplay in additon to other media like boxart or logo. If no cover is used Portmaster will use the screenshot instead.</p> <p>To edit existing metadata and to create a new gameinfo.xml file you can use following tool: https://portmaster.games/metadata-editor.html</p> <p>Here is the structure of a filled out gameinfo.xml</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;gameList&gt;\n  &lt;game&gt;\n    &lt;path&gt;./Angband.sh&lt;/path&gt;\n    &lt;name&gt;Angband&lt;/name&gt;\n    &lt;desc&gt;Angband is a free, single-player dungeon exploration game.\n\nYou play an adventurer seeking riches, fighting monsters, and preparing for a final battle with Morgoth, the Lord of Darkness.&lt;/desc&gt;\n    &lt;releasedate&gt;20230819T000000&lt;/releasedate&gt;\n    &lt;developer&gt;Angband Development Team&lt;/developer&gt;\n    &lt;publisher&gt;Angband Development Team&lt;/publisher&gt;\n    &lt;genre&gt;RPG&lt;/genre&gt;\n    &lt;image&gt;./angband/cover.png&lt;/image&gt;\n  &lt;/game&gt;\n&lt;/gameList&gt;\n</code></pre>"},{"location":"contribute/porting/packaging/#licenses","title":"Licenses","text":"<p>Please add licensefiles for all sources, libraries and assets you used into a licenses subfolder.</p> <p>For example:</p> <ul> <li>game project open source file (if it's an open source game)</li> <li>gptokeyb license file</li> <li>sdl1.2 compat license file</li> <li>gl4es license file</li> <li>box86 / box64 license files</li> <li>.so libraries files</li> </ul> <p>You often can find the libraries either in the source folder you compiled or in distributions under /usr/share/doc/package/copyright</p>"},{"location":"contribute/porting/packaging/#the-launchscript-sh","title":"The Launchscript .sh","text":"<p>Example Scripts</p> <p>All of the example scripts can be found here!</p> <p>The script should have capital letters (like <code>Port Name.sh</code>) and must end in <code>.sh</code>, the port directory should be the same as the containing directory. Some legacy ports have different names, new ports won't be accepted unless they follow the new convention.</p> <p>Below we pick apart a launchscript  and explain what each function does:</p> <pre><code># Below we assign the source of the control folder (which is the PortMaster folder) based on the distro:\n#!/bin/bash\n\nXDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}\n\nif [ -d \"/opt/system/Tools/PortMaster/\" ]; then\n  controlfolder=\"/opt/system/Tools/PortMaster\"\nelif [ -d \"/opt/tools/PortMaster/\" ]; then\n  controlfolder=\"/opt/tools/PortMaster\"\nelif [ -d \"$XDG_DATA_HOME/PortMaster/\" ]; then\n  controlfolder=\"$XDG_DATA_HOME/PortMaster\"\nelse\n  controlfolder=\"/roms/ports/PortMaster\"\nfi\n\nsource $controlfolder/control.txt # We source the control.txt file contents here\n# The $ESUDO, $directory, $param_device and necessary sdl configuration controller configurations will be sourced from the control.txt file shown [here]\n\n# If a Port is built for armhf architecture only (Need for Speed 2 for example) we set this flag so that some environment condition variables are set in the CFWs mod files.\n# Example \"https://github.com/PortsMaster/PortMaster-GUI/blob/main/PortMaster/mod_JELOS.txt\"\nexport PORT_32BIT=\"Y\" # If using a 32 bit port, else comment it out.\n\n# We source custom mod files from the portmaster folder example mod_jelos.txt which containts pipewire fixes\n[ -f \"${controlfolder}/mod_${CFW_NAME}.txt\" ] &amp;&amp; source \"${controlfolder}/mod_${CFW_NAME}.txt\"\n\n# We pull the controller configs like the correct SDL2 Gamecontrollerdb GUID from the get_controls function from the control.txt file here\nget_controls\n\n# We switch to the port's directory location below &amp; set the variable for the gamedir and a configuration dir  easier handling below\nGAMEDIR=/$directory/ports/portfolder/\nCONFDIR=\"$GAMEDIR/conf/\"\n\n# Ensure the conf directory exists\nmkdir -p \"$GAMEDIR/conf\"\n\n# Switch to the game directory\ncd $GAMEDIR\n\n# Log the execution of the script, the script overwrites itself on each launch\n&gt; \"$GAMEDIR/log.txt\" &amp;&amp; exec &gt; &gt;(tee \"$GAMEDIR/log.txt\") 2&gt;&amp;1\n\n# Some ports like to create save files or settings files in the user's home folder or other locations. We map these config folders so we can either preconfigure games and or have the savefiles in one place. I\n# You can either use XDG variables to redirect the Ports to our gamefolder if the port supports it:\n\n# Set the XDG environment variables for config &amp; savefiles\nexport XDG_DATA_HOME=\"$CONFDIR\"\n\n# OR  \n\n# Use bind_directories to reroute that to a location within the ports folder.\nbind_directories ~/.portfolder $GAMEDIR/conf/.portfolder \n\n# Port specific additional libraries should be included within the port's directory in a separate subfolder named libs.aarch64, libs.armhf or libs.x64\nexport LD_LIBRARY_PATH=\"$GAMEDIR/libs.${DEVICE_ARCH}:$LD_LIBRARY_PATH\"\n\n# Provide appropriate controller configuration if it recognizes SDL controller input\nexport SDL_GAMECONTROLLERCONFIG=\"$sdl_controllerconfig\"\n\n# If a port uses GL4ES (libgl.so.1) a folder named gl4es.aarch64 etc. needs to be created with the libgl.so.1 file in it. This makes sure that each cfw and device get the correct GL4ES export.\nif [ -f \"${controlfolder}/libgl_${CFW_NAME}.txt\" ]; then \n  source \"${controlfolder}/libgl_${CFW_NAME}.txt\"\nelse\n  source \"${controlfolder}/libgl_default.txt\"\nfi\n\n# We launch gptokeyb using this $GPTOKEYB variable as it will take care of sourcing the executable from the central location,\n# assign the appropriate exit hotkey dependent on the device (ex. select + start for most devices and minus + start for the \n# rgb10) and assign the appropriate method for killing an executable dependent on the OS the port is run from.\n# With -c we assign a custom mapping file else gptokeyb will only run as a tool to kill the process.\n# For $ANALOG_STICKS we have the ability to supply multiple gptk files to support 1 and 2 analogue stick devices in different ways.\n# For a proper documentation how gptokeyb works: [Link](https://github.com/PortsMaster/gptokeyb)\n$GPTOKEYB \"portexecutable.${DEVICE_ARCH}\" -c \"./portname.gptk.$ANALOG_STICKS\" &amp;\n\n# Do some platform specific stuff right before the port is launched but after GPTOKEYB is run.\npm_platform_helper \"$GAMEDIR/portexecutable.${DEVICE_ARCH}\"\n\n# Now we launch the port's executable with multiarch support. Make sure to rename your file according to the architecture you built for. E.g. portexecutable.aarch64\n./portexecutable.${DEVICE_ARCH} Launch the executable\n\n# Cleanup any running gptokeyb instances, and any platform specific stuff.\npm_finish\n</code></pre>"},{"location":"contribute/porting/packaging/#launchscript-functions-and-error-handling","title":"Launchscript functions and error handling","text":"<p>Some games require installation or patches on first run. We can use functions inside shell to keep code organized. Use error handling inside functions to keep the launchscript stable.</p> <p>Example:</p> <pre><code># Functions\ninstall() {\n    pm_message \"Performing first-run setup...\" \n    # Purge unneeded files\n    rm -rf assets/*.exe assets/*.dll assets/.gitkeep\n    # Rename data.win\n    pm_message \"Moving game files...\" \n    mv \"./assets/data.win\" \"./game.droid\" || return 1\n    mv assets/* ./\n    rmdir assets\n    # Do localization fonts and xdelta patch if low ram\n    if [ $DEVICE_RAM -lt 2 ]; then\n        rm -rf \"$GAMEDIR/localization_fonts.csv\"\n        mv patch/localization_fonts.csv ./\n        find $GAMEDIR -type f -iname \"*.ttf\" ! -iname \"Commodore Rounded v1-1.ttf\" ! -iname \"small_pixel.ttf\" -delete\n        apply_patch &amp;&amp; rm -rf \"$GAMEDIR/patch\" # Only remove if function is successful\n    fi\n}\n\napply_patch() {\n    pm_message \"Applying patch...\" \n    if [ -f \"$controlfolder/xdelta3\" ]; then\n        error=$(\"$controlfolder/xdelta3\" -d -s \"$GAMEDIR/game.droid\" \"$GAMEDIR/patch/iosas.xdelta\" \"$GAMEDIR/game2.droid\" 2&gt;&amp;1)\n        if [ $? -eq 0 ]; then\n            rm -rf \"$GAMEDIR/game.droid\"\n            mv \"$GAMEDIR/game2.droid\" \"$GAMEDIR/game.droid\"\n            pm_message \"Patch applied successfully.\" \n        else\n            pm_message \"Failed to apply patch. Error: $error\" \n            rm -f \"$GAMEDIR/game2.droid\"\n            return 1\n        fi\n    else\n        pm_message \"Error: xdelta3 not found in $controlfolder. Try updating PortMaster.\" \n        return 1\n    fi\n}\n\nif [ ! -f \"$GAMEDIR/game.droid\" ] &amp;&amp; [ ! -f \"$GAMEDIR/.installed\" ]; then\n    install &amp;&amp; touch \"$GAMEDIR/.installed\" # Only touch if function is successful\nfi\n</code></pre> <p>Several things to note here:</p> <ul> <li>The line for moving the game.droid file immediately returns <code>1</code> if it couldn't do it. This prevents the install function from proceeding if a critical task wasn't completed.</li> <li>The <code>apply_patch</code> function and <code>.csv</code> file are only used if the target device has less than 2GB of RAM, making use of the <code>$DEVICE_RAM</code> variable filled by <code>control.txt</code>.</li> <li>The <code>$GAMEDIR/patch</code> directory is only removed if the <code>apply_patch</code> function is successful, by using <code>&amp;&amp;</code>. This allows the user to correct any mistakes during the install process without having to reinstall the port.</li> <li>The <code>apply_patch</code> function itself is a nest of IF conditionals to assist with error checking. It returns <code>1</code> if it failed.</li> <li>The <code>installed</code> function is only run once if successful. If it was successfully completed, a <code>.installed</code> file is created, preventing future runs of the function.</li> </ul>"},{"location":"contribute/porting/script-templates/","title":"Packaging Ports for PortMaster","text":""},{"location":"contribute/porting/script-templates/#launch-script-templates","title":"Launch Script Templates","text":"<p>Info</p> <p>These scripts are for ports that support native rendering to kms/drm, for X11 ports see below!</p> BasicGodot 3 <pre><code>#!/bin/bash\nXDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}\n\nif [ -d \"/opt/system/Tools/PortMaster/\" ]; then\n  controlfolder=\"/opt/system/Tools/PortMaster\"\nelif [ -d \"/opt/tools/PortMaster/\" ]; then\n  controlfolder=\"/opt/tools/PortMaster\"\nelif [ -d \"$XDG_DATA_HOME/PortMaster/\" ]; then\n  controlfolder=\"$XDG_DATA_HOME/PortMaster\"\nelse\n  controlfolder=\"/roms/ports/PortMaster\"\nfi\n\nsource $controlfolder/control.txt\n[ -f \"${controlfolder}/mod_${CFW_NAME}.txt\" ] &amp;&amp; source \"${controlfolder}/mod_${CFW_NAME}.txt\"\n\nget_controls\nGAMEDIR=/$directory/ports/portfolder/\nCONFDIR=\"$GAMEDIR/conf/\"\n\nmkdir -p \"$GAMEDIR/conf\"\ncd $GAMEDIR\n\n&gt; \"$GAMEDIR/log.txt\" &amp;&amp; exec &gt; &gt;(tee \"$GAMEDIR/log.txt\") 2&gt;&amp;1\n\nexport XDG_DATA_HOME=\"$CONFDIR\"\nexport LD_LIBRARY_PATH=\"$GAMEDIR/libs.${DEVICE_ARCH}:$LD_LIBRARY_PATH\"\nexport SDL_GAMECONTROLLERCONFIG=\"$sdl_controllerconfig\"\nbind_directories ~/.portfolder $GAMEDIR/conf/.portfolder\n\n$GPTOKEYB \"portexecutable.${DEVICE_ARCH}\" -c \"./portname.gptk.$ANALOGSTICKS\" &amp;\npm_platform_helper \"$GAMEDIR/portexecutable.${DEVICE_ARCH}\"\n./portexecutable.${DEVICE_ARCH}\npm_finish\n</code></pre> <pre><code>#!/bin/bash\n\nXDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}\n\nif [ -d \"/opt/system/Tools/PortMaster/\" ]; then\n  controlfolder=\"/opt/system/Tools/PortMaster\"\nelif [ -d \"/opt/tools/PortMaster/\" ]; then\n  controlfolder=\"/opt/tools/PortMaster\"\nelif [ -d \"$XDG_DATA_HOME/PortMaster/\" ]; then\n  controlfolder=\"$XDG_DATA_HOME/PortMaster\"\nelse\n  controlfolder=\"/roms/ports/PortMaster\"\nfi\n\nsource $controlfolder/control.txt\n\n[ -f \"${controlfolder}/mod_${CFW_NAME}.txt\" ] &amp;&amp; source \"${controlfolder}/mod_${CFW_NAME}.txt\"\n\nget_controls\n\nGAMEDIR=/$directory/ports/portfolder/\nCONFDIR=\"$GAMEDIR/conf/\"\n\n&gt; \"$GAMEDIR/log.txt\" &amp;&amp; exec &gt; &gt;(tee \"$GAMEDIR/log.txt\") 2&gt;&amp;1\n\nmkdir -p \"$GAMEDIR/conf\"\ncd $GAMEDIR\n\nruntime=\"frt_3.2.3\"\nif [ ! -f \"$controlfolder/libs/${runtime}.squashfs\" ]; then\n  # Check for runtime if not downloaded via PM\n  if [ ! -f \"$controlfolder/harbourmaster\" ]; then\n    pm_message \"This port requires the latest PortMaster to run, please go to https://portmaster.games/ for more info.\"\n    sleep 5\n    exit 1\n  fi\n\n  $ESUDO $controlfolder/harbourmaster --quiet --no-check runtime_check \"${runtime}.squashfs\"\nfi\n\n# Set the XDG environment variables for config &amp; savefiles\nexport XDG_DATA_HOME=\"$CONFDIR\"\nexport SDL_GAMECONTROLLERCONFIG=\"$sdl_controllerconfig\"\n\n#  If XDG Path does not work\n# Use _directories to reroute that to a location within the ports folder.\nbind_directories ~/.portfolder $GAMEDIR/conf/.portfolder \n\n# Setup Godot\ngodot_dir=\"$HOME/godot\"\ngodot_file=\"$controlfolder/libs/${runtime}.squashfs\"\n$ESUDO mkdir -p \"$godot_dir\"\n$ESUDO umount \"$godot_file\" || true\n$ESUDO mount \"$godot_file\" \"$godot_dir\"\nPATH=\"$godot_dir:$PATH\"\n\n# By default FRT sets Select as a Force Quit Hotkey, with this we disable that.\nexport FRT_NO_EXIT_SHORTCUTS=FRT_NO_EXIT_SHORTCUTS \n\n\n$GPTOKEYB \"$runtime\" -c \"./godot.gptk\" &amp;\npm_platform_helper \"$godot_dir/$runtime\"\n\"$runtime\" $GODOT_OPTS --main-pack \"gamename.pck\"\n\nif [[ \"$PM_CAN_MOUNT\" != \"N\" ]]; then\n    $ESUDO umount \"$godot_dir\"\nfi\npm_finish\n</code></pre> <p></p> <p>Info</p> <p>These scripts are for ports that X11 windowing and therefore need the WestonPack runtime!</p> BasicGodot 4 <pre><code>#!/bin/bash\nXDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}\n\nif [ -d \"/opt/system/Tools/PortMaster/\" ]; then\n  controlfolder=\"/opt/system/Tools/PortMaster\"\nelif [ -d \"/opt/tools/PortMaster/\" ]; then\n  controlfolder=\"/opt/tools/PortMaster\"\nelif [ -d \"$XDG_DATA_HOME/PortMaster/\" ]; then\n  controlfolder=\"$XDG_DATA_HOME/PortMaster\"\nelse\n  controlfolder=\"/roms/ports/PortMaster\"\nfi\n\nsource $controlfolder/control.txt\n[ -f \"${controlfolder}/mod_${CFW_NAME}.txt\" ] &amp;&amp; source \"${controlfolder}/mod_${CFW_NAME}.txt\"\n\nget_controls\nGAMEDIR=/$directory/ports/portfolder/\nCONFDIR=\"$GAMEDIR/conf/\"\n\nmkdir -p \"$GAMEDIR/conf\"\ncd $GAMEDIR\n\n&gt; \"$GAMEDIR/log.txt\" &amp;&amp; exec &gt; &gt;(tee \"$GAMEDIR/log.txt\") 2&gt;&amp;1\n\nexport XDG_DATA_HOME=\"$CONFDIR\"\nexport LD_LIBRARY_PATH=\"$GAMEDIR/libs.${DEVICE_ARCH}:$LD_LIBRARY_PATH\"\nexport SDL_GAMECONTROLLERCONFIG=\"$sdl_controllerconfig\"\nbind_directories ~/.portfolder $GAMEDIR/conf/.portfolder\n\n$GPTOKEYB \"portexecutable.${DEVICE_ARCH}\" -c \"./portname.gptk.$ANALOGSTICKS\" &amp;\npm_platform_helper \"$GAMEDIR/portexecutable.${DEVICE_ARCH}\"\n./portexecutable.${DEVICE_ARCH}\npm_finish\n</code></pre> <pre><code>#!/bin/bash\n\nXDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}\n\nif [ -d \"/opt/system/Tools/PortMaster/\" ]; then\n  controlfolder=\"/opt/system/Tools/PortMaster\"\nelif [ -d \"/opt/tools/PortMaster/\" ]; then\n  controlfolder=\"/opt/tools/PortMaster\"\nelif [ -d \"$XDG_DATA_HOME/PortMaster/\" ]; then\n  controlfolder=\"$XDG_DATA_HOME/PortMaster\"\nelse\n  controlfolder=\"/roms/ports/PortMaster\"\nfi\n\nsource $controlfolder/control.txt\n\n[ -f \"${controlfolder}/mod_${CFW_NAME}.txt\" ] &amp;&amp; source \"${controlfolder}/mod_${CFW_NAME}.txt\"\n\nget_controls\n\nGAMEDIR=/$directory/ports/portfolder/\nCONFDIR=\"$GAMEDIR/conf/\"\n\n&gt; \"$GAMEDIR/log.txt\" &amp;&amp; exec &gt; &gt;(tee \"$GAMEDIR/log.txt\") 2&gt;&amp;1\n\nmkdir -p \"$GAMEDIR/conf\"\ncd $GAMEDIR\n\nruntime=\"frt_3.2.3\"\nif [ ! -f \"$controlfolder/libs/${runtime}.squashfs\" ]; then\n  # Check for runtime if not downloaded via PM\n  if [ ! -f \"$controlfolder/harbourmaster\" ]; then\n    pm_message \"This port requires the latest PortMaster to run, please go to https://portmaster.games/ for more info.\"\n    sleep 5\n    exit 1\n  fi\n\n  $ESUDO $controlfolder/harbourmaster --quiet --no-check runtime_check \"${runtime}.squashfs\"\nfi\n\n# Set the XDG environment variables for config &amp; savefiles\nexport XDG_DATA_HOME=\"$CONFDIR\"\nexport SDL_GAMECONTROLLERCONFIG=\"$sdl_controllerconfig\"\n\n#  If XDG Path does not work\n# Use _directories to reroute that to a location within the ports folder.\nbind_directories ~/.portfolder $GAMEDIR/conf/.portfolder \n\n# Setup Godot\ngodot_dir=\"$HOME/godot\"\ngodot_file=\"$controlfolder/libs/${runtime}.squashfs\"\n$ESUDO mkdir -p \"$godot_dir\"\n$ESUDO umount \"$godot_file\" || true\n$ESUDO mount \"$godot_file\" \"$godot_dir\"\nPATH=\"$godot_dir:$PATH\"\n\n# By default FRT sets Select as a Force Quit Hotkey, with this we disable that.\nexport FRT_NO_EXIT_SHORTCUTS=FRT_NO_EXIT_SHORTCUTS \n\n\n$GPTOKEYB \"$runtime\" -c \"./godot.gptk\" &amp;\npm_platform_helper \"$godot_dir/$runtime\"\n\"$runtime\" $GODOT_OPTS --main-pack \"gamename.pck\"\n\nif [[ \"$PM_CAN_MOUNT\" != \"N\" ]]; then\n    $ESUDO umount \"$godot_dir\"\nfi\npm_finish\n</code></pre>"},{"location":"contribute/porting/what-can-be-ported/","title":"What can be ported?","text":"<p>To determine the possibility of a game being ported a flowchart has been made.</p> <p>Tip</p> <p>Sites like  SteamDB can be used to find relevant info on the technologies uses by commercial games.</p> <p> </p> <p>Warning</p> <p>This flowchart is to be used a guide to determine the feasability of a game being portable, this does not guarantee succes.</p>"},{"location":"contribute/porting/engines/gamemaker-studio/","title":"GameMaker Studio","text":"<p>GameMaker Studio is a game development engine designed to simplify the creation of 2D games. It offers a drag-and-drop interface for beginners and a custom scripting language for advanced users. Developers can create game elements through an event-driven system, making the engine accessible without requiring extensive programming knowledge.</p> <p>While GameMaker supports multiple platforms, including Windows, macOS, Linux, Android, iOS, and major consoles like Nintendo Switch, PlayStation, and Xbox, its support for ARM-based Linux systems is extremely limited. As a result, GameMaker titles are not compatible with the handheld devices supported by PortMaster using conventional methods.</p>"},{"location":"contribute/porting/engines/gamemaker-studio/#porting-methodology","title":"Porting Methodology","text":"<p>Gmloader and its successor, gmloader-next are GameMaker Studio compatibility layers for ARM-based Linux systems, developed by JohnnyOnFlame and contributors. These projects share a history and codebase to the PS Vita parallel project, YoYoLoader.</p> <p>Both gmloader and gmloader-next function as compatibility layers for <code>libyoyo.so</code>, the official GameMaker Studio Runner application for Android. They load the ARM executable into memory, resolve its imports with native functions, and apply necessary patches to ensure proper execution.</p> <p>By simulating a minimalist Android-like environment, these tools enable the native execution of GameMaker Studio-developed games on ARM-based Linux devices.</p> <p>For more details on gmloader\u2019s origin and deeper technical functionality, refer to the research documentation.</p>"},{"location":"contribute/porting/engines/gamemaker-studio/#compatibility","title":"Compatibility","text":"<p>The theoretical compatibility across platforms is summarized in the table below:</p> Platform Bytecode Compiler YoYo Compiler (YYC) Android Yes Yes Windows Yes No Linux Yes No macOS Yes No <ul> <li>gmloader: Supports GMS versions 2022.x and earlier, compatible with ARMv7/armhf architectures.</li> <li>gmloader-next.armhf: Supports all GMS versions, works with ARMv7/armhf.</li> <li>gmloader-next.aarch64: Supports GMS version 2.2.1+, compatible with ARMv8/AARCH64.</li> </ul>"},{"location":"contribute/porting/engines/gamemaker-studio/#what-is-yyc","title":"What is YYC?","text":"<p>YYC (YoYo Compiler) is a feature in GameMaker Studio that compiles game code directly into machine code. This process leads to:</p> <ul> <li>Faster execution speed.</li> <li>Enhanced security due to direct compilation.</li> <li>However, the compiled code is integrated tightly into the executable, reducing portability across different platforms.</li> </ul>"},{"location":"contribute/porting/engines/gamemaker-studio/#determining-gms-version-and-compiler-type","title":"Determining GMS Version and Compiler Type","text":"<p>To determine whether a GameMaker game uses YYC or bytecode, follow these steps:</p> <ol> <li>Install UndertaleModTool from here.</li> <li>Extract game assets (e.g., <code>data.win</code>, <code>game.unx</code>, <code>game.ios</code>, or <code>game.droid</code>) from the APK using 7Zip.</li> <li>Open the extracted assets in UndertaleModTool. The tool will automatically detect if the game uses YYC or bytecode.</li> <li>Navigate to Data &gt; General Info to check the GameMaker version.</li> </ol> <p>If the game uses YYC, a warning will appear in UndertaleModTool.</p>"},{"location":"contribute/porting/engines/gamemaker-studio/#steps-involved","title":"Steps Involved","text":"<p>Porting a GameMaker game to an ARM-based Linux device using gmloader involves several key steps. The following guide outlines the process for porting a game.</p>"},{"location":"contribute/porting/engines/gamemaker-studio/#step-1-find-the-target-game","title":"Step 1: Find the Target Game","text":"<p>The first step is to select a GameMaker game to port. A variety of GameMaker-developed games can be found on the following platforms:</p> <ul> <li>Itch.io: Games made with GameMaker</li> <li>SteamDB: Steam games using GameMaker Studio</li> </ul> <p>Tags and filters can be used to narrow down the search. It is recommended to begin with free games, as most commercially successful portable games have already been ported.</p>"},{"location":"contribute/porting/engines/gamemaker-studio/#step-2-extract-the-games-bytecode-file","title":"Step 2: Extract the Game\u2019s Bytecode File","text":"<p>After selecting the game, the next step is to locate its bytecode file. GameMaker games typically store their assets in files such as data.win, game.unx, game.ios, or game.droid.</p> <p>To extract and inspect these files:</p> <ol> <li>Download UndertaleModTool from here.</li> <li>Extract the game files from the APK or game folder.</li> <li>Open the bytecode file (e.g., data.win, game.unx, game.ios,or game.droid) with UndertaleModTool.</li> </ol>"},{"location":"contribute/porting/engines/gamemaker-studio/#step-3-check-for-yyc-and-gamemaker-version","title":"Step 3: Check for YYC and GameMaker Version","text":"<p>Within UndertaleModTool, check if the game uses YYC (YoYo Compiler) or bytecode:</p> <ol> <li>Look for the YYC warning. If the game uses YYC, a warning will appear.</li> <li>Check the GameMaker version under Data &gt; General Info.</li> </ol> <p>Note: UndertaleModTool makes an educated guess regarding the version, so accuracy is not always guaranteed.</p>"},{"location":"contribute/porting/engines/gamemaker-studio/#step-4-select-the-correct-wrapper","title":"Step 4: Select the Correct Wrapper","text":"<p>After confirming the GameMaker version and compiler type, the appropriate wrapper APK should be downloaded from the following repository:</p> <ul> <li>GameMaker Studio Wrappers: wrapper APKs</li> </ul> <p>Note: It is preferable to build a custom wrapper/APK for final packaging. This can be done by downloading the matching version of GameMaker Studio, setting up the Android export, and exporting an open-source example. After the first launch, the assets can be removed using the following command: <code>zip -d portname.port 'assets/*'</code>. For further details on the reasoning behind this packaging, refer to the documentation below.</p>"},{"location":"contribute/porting/engines/gamemaker-studio/#step-5-rework-the-example-package-for-the-game","title":"Step 5: Rework the Example Package for the Game","text":"<p>After obtaining the correct wrapper, the example zip package must be reworked for the specific game. Depending on the version of GameMaker Studio (GMS) used, choose between the following:</p> <ul> <li>gmloader (deprecated unless necessary)</li> <li>gmloadernext.aarch64 (recommended for GMS 2.2.1+ on ARMv8)</li> <li>gmloadernext.armhf (recommended for GMS 2.2.1- on ARMv7)</li> </ul> <p>It is crucial to ensure that the selected wrapper/APK includes the appropriate, matching, ARMv7 or ARMv8 Android libraries.</p> <p>By following these steps, a GameMaker game can be ported to an ARM-based Linux device using gmloader. Some games may require additional troubleshooting or configuration to run properly on the target device.</p>"},{"location":"contribute/porting/engines/gamemaker-studio/#packaging","title":"Packaging","text":""},{"location":"contribute/porting/engines/gamemaker-studio/#gmloader-port-file-structure","title":"GMLoader Port File Structure","text":"<pre><code>Portname.sh\nportname/\n\u251c\u2500\u2500 lib/\n\u2502   \u251c\u2500\u2500 armv8a/\n\u2502   \u251c\u2500\u2500 armv7a/\n\u2502   \u251c\u2500\u2500 libopenal.so.1\n\u2502   \u251c\u2500\u2500 libzip.so.5\n\u2502   \u2514\u2500\u2500 libcrypto.so.1\n\u251c\u2500\u2500 assets/\n\u2502   \u2514\u2500\u2500 .gitkeep\n\u251c\u2500\u2500 saves/\n\u2502   \u2514\u2500\u2500 .gitkeep\n\u251c\u2500\u2500 gmloader.json\n\u251c\u2500\u2500 patches/\n\u2502   \u2514\u2500\u2500 patchscript\n\u251c\u2500\u2500 portname.gptk\n\u2514\u2500\u2500 portname.port\n</code></pre> <ul> <li> <p>lib folder     The <code>lib</code> folder within the runtime squashfs houses Android AOSP libraries, taken from a prebuilt image provided by Google. This folder is named <code>lib</code> because these are native Android libraries, following the file path structure used in Android. The <code>libs.${DEVICE_ARCH}</code> folder contains libraries native to either <code>aarch64</code> or <code>armhf</code>. GMLoader-Next requires <code>libcrypto</code>, <code>libopenal</code>, and <code>libzip</code> at a minimum to function.</p> </li> <li> <p>licenses folder     The <code>licenses</code> folder contains text and markdown files that outline the license agreements for each library and binary used in GMLoader.</p> </li> <li> <p>assets folder     This folder is where the end users place their game data. Typically, users will copy everything from their Steam or GOG installation folder, or unzip an archive from Itch.io into this folder. Once the <code>patchscript</code> completes on the first run, this folder may be removed.</p> </li> <li> <p>saves folder     This folder is used to store GameMaker games\u2019 save data. While the folder can be renamed, it is typically referred to as <code>saves</code>.</p> </li> <li> <p>gmloader.json     This JSON file contains configuration options for GMLoader-Next on a per-port basis. It is configurable and can be named <code>portname.json</code>.</p> <p>{     \"save_dir\" : \"saves\",     \"apk_path\" : \"my_game.port\",     \"show_cursor\" : false,     \"disable_controller\" : false,     \"force_platform\" : \"os_windows\" }</p> </li> <li> <p>patchscript     This is a bash script that runs on the first boot via the PortMaster Patcher program. The <code>.sh</code> file extension is avoided to prevent interference with PortMaster scripts. An example of the script can be found here.</p> </li> <li> <p>portname.gptk     If the GpToKeyB tool is used in the port, this file is likely included. Even if native gamepad controls are present, it is still advisable to include an empty <code>portname.gptk</code> file for debugging.</p> <pre><code>back = \\\"\nstart = \\\"\nup = \\\"\ndown = \\\"\nleft = \\\"\nright = \\\"\na = \\\"\nb = \\\"\nx = \\\"\ny = \\\"\nl1 = \\\"\nl2 = \\\"\nl3 = \\\"\nr1 = \\\"\nr2 = \\\"\nr3 = \\\"\nleft_analog_up = \\\"\nleft_analog_down = \\\"\nleft_analog_left = \\\"\nleft_analog_right = \\\"\nright_analog_up = \\\"\nright_analog_down = \\\" \nright_analog_left = \\\"\nright_analog_right = \\\"\n</code></pre> </li> <li> <p>portname.port     This is an archive file structured like an APK file but without any Android-specific references. Upon opening, it will contain a <code>lib</code> folder with the GameMaker Studio runtime file and, if the port has been packed, an <code>assets</code> folder containing all the game data previously stored in the <code>portname/assets</code> folder.</p> </li> </ul> <p>Note: Game Maker Studio has listed two end-user license agreements on their website for their runtimes: the free agreement, and the professional agreement. Both list the following clause:</p> <p>This licence grants you the right to distribute the runtime portion of GameMaker in executable code format only as an integrated and inseparable part of your content to third parties to whom you license such content, subject in each case to your full compliance with the GameMaker Terms and payment of all applicable fees.</p> <p>In order to adhere to the EULA, we execute a good-faith practice by bundling game data with the runtime inside the <code>portname.port</code> archive.</p>"},{"location":"contribute/porting/engines/gamemaker-studio/#patching-and-known-bugs","title":"Patching and known bugs","text":"<p>Sometimes ports need patches to function properly. Patches can be created with UTMT and In-house tools from Portmaster. Patches are usually deployed with an xdelta patch. When patching takes long it\u2019s recommended to use the PortMaster patching program to show progress.</p>"},{"location":"contribute/porting/engines/gamemaker-studio/#pack-audio-into-wrapper","title":"Pack audio into wrapper:","text":"<p>Gmloader can have trouble loading in the audio when they are not packed into the wrapper/apk. The following example script will pack the OGG\u2019s to the wrapper/apk. This can also be adapted for games that use audiogroups.</p> <pre><code>    # Check for .ogg files and move to APK\n        if [ -n \"$(ls ./assets/*.ogg 2&gt;/dev/null)\" ]; then\n        zip -r -0 ./portname.port./assets/\n        echo \"Zipped contents to ./portname.port\"\n    else\n        echo \"No .ogg files found\"\n    fi\n</code></pre>"},{"location":"contribute/porting/engines/gamemaker-studio/#newtexturerepacker-utmt","title":"NewTextureRepacker (UTMT)","text":"<p>Script to export and repack textures developed by JohnnyOnFlame. Known to fix crashes caused by huge texturepages on Mali gpu\u2019s. Can reduce ram usage. Known to fix broken fonts on Mali gpu\u2019s.</p>"},{"location":"contribute/porting/engines/gamemaker-studio/#bytecode-updowngraders-utmt","title":"Bytecode up/downgraders (UTMT)","text":"<p>This collection of scripts can up and downgrade bytecode versions. This can increase compatibility for GMS1 and GMS2 games.</p>"},{"location":"contribute/porting/engines/gamemaker-studio/#gmtools-portmaster-in-house","title":"GMTools (PortMaster In-house)","text":"<p>Not all GameMaker games are the same when it comes to audio. Developers have a variety of audio options, from streaming external audio (like Undertale), to grouping audio files into <code>audiogroup.dat</code> files, to embedding audio files into the GMS data file. When audio files aren\u2019t streamed, they\u2019re loaded into memory at runtime. For low-mem handhelds, this can cause problems. GMTools analyzes all audiogroups and the data file and converts any <code>.wav</code> files it finds to <code>.ogg</code>, and can also compress audio to a specified bitrate. This can significantly reduce ram usage. For our usecase, audio quality isn\u2019t a big concern\u2013the handhelds use small speakers, after all.</p>"},{"location":"contribute/porting/engines/gamemaker-studio/#patch-deployment-portmaster-tool","title":"Patch deployment (PortMaster tool)","text":"<p>If a GMS data file requires modifications, we need to then supply a method for the end-user to make use of the modifications without having to open up UTMT themselves. PortMaster strives to make ports as accessible and seamless as possible. XDelta3 both creates a patch file containing the differences between our two GMS data files, and applies patch files on-device during the first-time launch process for a port. This can be done with out xdelta binary inside the PortMaster controlfolder using the following:</p> <pre><code>    Check if \"data.win\" exists and its MD5 checksum matches the specified value then apply patch\n    if [ -f \"assets/data.win\" ]; then\n        checksum=$(md5sum \"assets/data.win\" | awk '{print $1}')\n        if [ \"$checksum\" = \"4b97bb2da8c515d787fe70aa03550ce5\" ]; then\n            $ESUDO $controlfolder/xdelta3 -d -s \"assets/data.win\" -f \"./patch/patch.xdelta3\" \"assets/game.droid\" &amp;&amp; \\\n            rm \"assets/data.win\"\n        fi\n    fi\n</code></pre>"},{"location":"contribute/porting/engines/gamemaker-studio/#tools-used","title":"Tools Used","text":"<p>PortMaster Engineers heavily rely on a few major tools that make GMS ports successful.</p> <ul> <li> <p>GameMaker Studio is the game engine in which these games are created. If a GMS game is open source, we can use GMS to build it ourselves and make it \u201cReady To Run\u201d. Example: Spelunky Classic HD.</p> </li> <li> <p>UndertaleModTool is a fantastic tool for both examining GameMaker files (<code>data.win</code>, <code>game.unx</code>, <code>game.ios</code> and <code>game.droid</code>) and modifying them via scripts.</p> </li> <li> <p>XDelta3 GUI is a gui version of xdelta3 that allows creating <code>.xdelta</code> patch files from differences in two files, used for GameMaker game modifications. A cli variant exists in PortMaster for applying these patches to legally obtained game files.</p> </li> <li> <p>GMTools, by PortMaster Crew Member Cyril aka kotzebuedog, is a python script that handles audio analysis and compression.</p> </li> <li> <p>GMLoader and GMLoader-Next are the compatibility binaries that translate android vm bytecode to linux vm. These two (used for armhf and aarch64 respectively) read an android GameMaker runner library <code>libyoyo.so</code> and translate it for linux execution.</p> </li> </ul>"},{"location":"contribute/porting/engines/gamemaker-studio/#troubleshooting-performance-case-study","title":"Troubleshooting Performance (Case Study)","text":"<p>UFO 50</p> <p>When RAM limitations are not the problem, it\u2019s time to dive deeper to find out why the game performs subpar. GameMaker uses rooms as a space to load content, and will often contain preplaced static content such as tiles to avoid draw calls later. A game can have several different rooms, like one for the title screen, and then another for the game itself, etc. These rooms are loaded into memory wholesale, so if a room has massive dimensions (think 10,000 x 20,000), it might also have a massive amount of object instances. This means the entire game will chug while using that room. A good example of this is UFO 50\u2019s Ninpek game. If we open UFO 50 in UndertaleModTool and load rm34_Ninpek, we can instantly see why it\u2019s choppy and slow on small-arm handhelds: the room dimensions are 15,360 x 216. Ninpek is a sidescrolling game with a constantly moving camera, so it\u2019s natural for the developer to create a room like this to hold the content and flow. However, because the room contains so many instances, it slows to a crawl on low-power devices. There\u2019s not much we can do about a room like this, though, at least not without heavily tampering with the game\u2014which would essentially deviate the project from a simple compatibility patch and turn it into a complete mod.  </p> <p>Isle of Sea and Sky</p> <p>Isles of Sea and Sky is another fine example of performance troubleshooting. In IOSAS, entering specific areas will result in a huge framerate drop\u2014which instantly recovers as soon as the area is left. This again indicates a problem with rooms. IOSAS has a specific set of rooms called \u201cgod rooms\u201d that load a specific script that has to do with \u201cgod gem\u201d special effects. This special effect in question is a calculation loop for drawing lines to synchronize with gems rotating around a sprite. Calculations are already CPU-intensive tasks, so putting them into a loop that executes every frame is asking for low performance. This particular case was resolved by modifying the loop to retrieve variables from a file pm-config.ini, an ini file specially made for the port. Inside, the user can configure two variables: Idol_SFX and FrameSkip. If Idol_SFX=1, meaning the loop is allowed to execute, then FrameSkip=x will dictate when the loop will execute. Instead of executing every frame (FrameSkip=0), we can modify the value so the loop only executes every 20 or 30 frames. This results in a change: our low framerate is now a stutter, where the game \u201cpauses\u201d once every x frames when it performs the calculation step. This means the special effect also isn\u2019t perfectly aligned\u2014but it preserves the artistic effect somewhat while compensating for low CPU power.</p>"},{"location":"contribute/porting/engines/gamemaker-studio/#compiling","title":"Compiling","text":"<p>Gmloader-next can be cross-compiled using the following steps. </p> <p>Info</p> <p>This is for development and contribution only, prebuilds are available in the example packages.</p> <ul> <li> <p>Clone the repository and all submodules <pre><code>    git clone https://github.com/JohnnyonFlame/gmloader-next --recursive\n</code></pre></p> </li> <li> <p>Build the project with desired target platform options <pre><code>    make -f Makefile.gmloader ARCH=aarch64-linux-gnu\n</code></pre></p> </li> <li> <p>Example: Build using Debian Bullseye for older platforms <pre><code>    make -f Makefile.gmloader \\\n      ARCH=aarch64-linux-gnu \\\n      LLVM_FILE=/usr/lib/llvm-11/lib/libclang-11.so.1 \\\n      LLVM_INC=/usr/aarch64-linux-gnu/include/c++/10/aarch64-linux-gnu \\\n      -j$(nproc)\n</code></pre></p> </li> <li> <p>Generate the libc dependencies <pre><code>    python3 scripts/generate_libc.py aarch64-linux-gnu \\\n      --llvm-includes /usr/aarch64-linux-gnu/include/c++/10/aarch64-linux-gnu \\\n      --llvm-library-file \"/usr/lib/llvm-11/lib/libclang-11.so.1\"\n</code></pre></p> </li> <li> <p>Deploy: Copy the lib redist folder to the application directory] <pre><code>    cp -r lib_redist/ &lt;application_folder&gt;/\n</code></pre></p> </li> </ul> <p>For more details, check the full documentation.</p>"},{"location":"contribute/porting/engines/gamemaker-studio/#conclusion","title":"Conclusion","text":"<p>By leveraging the tools and knowledge outlined in this guide, PortMaster Engineers enable modern GameMaker Studio games to run smoothly on small ARM-based handheld devices. The primary focus is on preserving the original game\u2019s features and feel, while optimizing it for different hardware. These optimizations help ensure that these iconic titles reach new platforms and players.</p> <p>Some of the notable games ported include:</p> <ul> <li>Undertale</li> <li>AM2R (Another Metroid 2 Remake)</li> <li>Forager</li> <li>UFO50</li> <li>Risk of Rain</li> </ul> <p>Through these efforts, we strive to make GameMaker Studio games accessible to a wider audience, ensuring they remain playable on a variety of devices.</p>"},{"location":"contribute/porting/engines/love2d/","title":"L\u00d6VE (Love2D)","text":"<p>L\u00d6VE is a lightweight 2D game framework that uses Lua. It\u2019s widely used for indie games and prototypes thanks to its simplicity, fast iteration, and full cross-platform support.</p> <p>Porting L\u00d6VE games to ARM-based Linux handhelds is straightforward because L\u00d6VE is open source and compiles natively for ARM. Most games can run unmodified or with minor tweaks.</p>"},{"location":"contribute/porting/engines/love2d/#porting-methodology","title":"Porting Methodology","text":"<p>PortMaster runs <code>.love</code> files using the system-installed <code>love</code> binary or a bundled one. Games can be packaged as:</p> <ul> <li>A <code>.love</code> file</li> <li>A directory with <code>main.lua</code></li> </ul> <p>For best compatibility, target L\u00d6VE 11.5.</p>"},{"location":"contribute/porting/engines/love2d/#file-structure","title":"File Structure","text":""},{"location":"contribute/porting/engines/love2d/#notes","title":"Notes","text":"<ul> <li>Games using FFI or native C libraries may require recompilation.</li> <li>For best results, avoid using large texture files or heavy shaders on low-end devices.</li> </ul>"},{"location":"contribute/porting/engines/love2d/#tools","title":"Tools","text":"<ul> <li>L\u00d6VE</li> </ul>"},{"location":"contribute/porting/engines/love2d/#example-games","title":"Example Games","text":""},{"location":"installation/installing-portmaster/","title":"Installing the GUI","text":"<p>Download the latest version of PortMaster.</p> <ul> <li>Install.PortMaster.sh - The base install of PortMaster.</li> <li>Install.Full.PortMaster.sh - The base install + all runtimes. (Recommended for offline devices)</li> </ul>"},{"location":"installation/installing-portmaster/#via-script","title":"Via Script","text":"<p>To install PortMaster via a simple Installation Script download either the Install.PortMaster.sh or Install.Full.PortMaster.sh (with all Runtimes already included) from the link above and place it in the appropriate folder for your CFW. After that simply execute the .sh from your Ports folder.</p> CFW Location AmberElec /roms/ports/ ArkOS /roms(or roms2)/ports/ ROCKNIX /roms/ports/ muOS /mnt/mmc/ROMS/Ports/ Knulli /userdata/roms/ports JELOS /roms/ports/ UnofficialOS /roms/ports/"},{"location":"installation/installing-portmaster/#other-cfw","title":"Other CFW","text":"<p>For the other CFW it is as simple as:</p> <ul> <li>Unzip PortMaster.zip and copy <code>PortMaster/</code> directory and all its contents into directory listed above.</li> <li>If you're using ArkOS, you will need to move the <code>/roms(or roms2)/tools/PortMaster/PortMaster.sh</code> up one directory to <code>/roms(or roms2)/tools/PortMaster.sh</code></li> </ul>"},{"location":"installation/installing-ports/","title":"Installing Ports","text":"<p>PortMaster is a simple GUI tool designed to download and install game ports for Linux handheld devices. Here's how you can install ports using PortMaster:</p>"},{"location":"installation/installing-ports/#best-experience-using-portmaster-application","title":"Best Experience: Using PortMaster Application","text":"<p>For the best experience, you should download and install ports through the PortMaster Application. This ensures that the installed port has the correct permissions and metadata.</p>"},{"location":"installation/installing-ports/#installation-process","title":"Installation Process","text":"<ol> <li>Open PortMaster Application</li> <li>Browse the available ports and select the one you want to install.</li> <li>Install the port \u2013 PortMaster handles all the details and ensures everything is set up correctly for your device.</li> </ol>"},{"location":"installation/installing-ports/#offline-installation","title":"Offline Installation","text":"<p>If your device doesn\u2019t have Wi-Fi or you can\u2019t use the PortMaster app, follow these steps for offline installation:</p>"},{"location":"installation/installing-ports/#1-download-the-port","title":"1. Download the Port","text":"<p>Go to the PortMaster repository and find the port you want to install. Download the <code>.zip</code> file for the desired port.</p>"},{"location":"installation/installing-ports/#2-place-the-port-in-the-autoinstall-folder","title":"2. Place the Port in the Autoinstall Folder","text":"<p>Copy the downloaded <code>.zip</code> file into the appropriate autoinstall folder for your device:</p> <ul> <li>AmberELEC, ROCKNIX, uOS, Jelos: <code>/roms/ports/PortMaster/autoinstall/</code></li> <li>muOS: <code>/mmc/MUOS/PortMaster/autoinstall/</code></li> <li>ArkOS: <code>/roms/tools/PortMaster/autoinstall/</code></li> <li>Knulli: <code>/userdata/system/.local/share/PortMaster/autoinstall/</code></li> </ul>"},{"location":"installation/installing-ports/#3-run-the-portmaster-application","title":"3. Run the PortMaster Application","text":"<p>Launch the PortMaster Application. The port will be installed automatically.</p>"},{"location":"installation/installing-ports/#alternative-manual-installation-not-recommended","title":"Alternative: Manual Installation (Not Recommended)","text":"<p>If the autoinstall folder method doesn't work, you can unzip the contents of the port into the corresponding ports folder for each custom firmware (CFW). However, this may break the port, and it may no longer start properly.</p> <p>Here are the port folder locations for manual installation:</p> <ul> <li>AmberELEC, ROCKNIX, uOS, Jelos: <code>/roms/ports/</code></li> <li>muOS: <code>/mmc/ports/</code> (for the folders) or <code>/mnt/mmc/ROMS/Ports/</code> (for the <code>.sh</code> files)</li> <li>ArkOS: <code>/roms/tools/PortMaster/autoinstall/</code></li> <li>Knulli: <code>/userdata/system/.local/share/PortMaster/autoinstall/</code></li> </ul>"},{"location":"installation/runtimes/","title":"Runtimes","text":"<p>PortMaster runtimes are shared engines or frameworks required for some ports to run. Sharing the runtimes between ports allows us to reduce the overall size of the port to save space on the device. </p> <p>Info</p> <p>Runtimes are automatically installed on devices with an internet connection. If you have an offline device please use the Full Portmaster Installer!</p>"},{"location":"installation/runtimes/#download-runtimes","title":"Download runtimes","text":"<p>Runtimes</p> <p>Loading runtimes...</p>"},{"location":"installation/supported-handhelds/","title":"Supported Handhelds","text":"Device Name Manufacturer Resolution Supported CFW Notes Anbernic RG ARC-D Anbernic 640x480 ROCKNIX Anbernic RG ARC-S Anbernic 640x480 ROCKNIX Anbernic RG28XX Anbernic 640x480 Knulli, ROCKNIX, muOS Anbernic RG34XX Anbernic 720x480 Knulli, ROCKNIX, muOS Some ports may have issues with this aspect ratio. Results will vary from port to port. Anbernic RG351MP Anbernic 640x480 AmberELEC, ArkOS, TheRA Anbernic RG351P/M Anbernic 480x320 AmberELEC, ArkOS (Wummle), ROCKNIX Some ports may have issues with this aspect ratio. Results will vary from port to port. Anbernic RG351V Anbernic 640x480 AmberELEC, ArkOS, ROCKNIX Anbernic RG353 M/V/P Anbernic 640x480 ArkOS Anbernic RG353 VS/PS Anbernic 640x480 ArkOS, ROCKNIX Anbernic RG35XX H Anbernic 640x480 Knulli, ROCKNIX, muOS Anbernic RG35XX PLUS Anbernic 640x480 Knulli, ROCKNIX, muOS Anbernic RG35XX SP Anbernic 640x480 Knulli, ROCKNIX, muOS Anbernic RG40XX H Anbernic 640x480 Knulli, ROCKNIX, muOS Anbernic RG40XX V Anbernic 640x480 Knulli, ROCKNIX, muOS Anbernic RG503 Anbernic 960x544 ArkOS, ROCKNIX Some ports may have issues with this aspect ratio. Results will vary from port to port. Anbernic RG552 Anbernic 1920x1152 AmberELEC, ROCKNIX Some ports may have issues with this aspect ratio. Results will vary from port to port. Anbernic RGCUBEXX Anbernic 640x480 Knulli, ROCKNIX, muOS Gameforce Ace Gameforce 1920x1080 ROCKNIX Some ports may have issues with this aspect ratio. Results will vary from port to port. Gameforce Chi Gameforce 640x480 ArkOS, EmuELEC GKD Bubble Game Kiddy 640x480 EMUELEC Hardkernel ODROID GO Advance Hardkernel 480x320 AmberELEC, ArkOS, EmuELEC, ROCKNIX Some ports may have issues with this aspect ratio. Results will vary from port to port. Hardkernel ODROID GO Super Hardkernel 854x480 AmberELEC, ArkOS, EmuELEC, ROCKNIX Some ports may have issues with this aspect ratio. Results will vary from port to port. Hardkernel ODROID GO Ultra Hardkernel 854x480 AmberELEC, ArkOS, EmuELEC, ROCKNIX Some ports may have issues with this aspect ratio. Results will vary from port to port. Powkiddy RGB10 Powkiddy 640x480 ArkOS, ROCKNIX Powkiddy RGB10MAX3 Powkiddy 1280x720 ROCKNIX Powkiddy RGB10MAX3 Pro Powkiddy 854x480 ROCKNIX Some ports may have issues with this aspect ratio. Results will vary from port to port. Powkiddy RGB20S Powkiddy 640x480 AmberELEC Powkiddy RGB30 Powkiddy 720x720 ArkOS, ROCKNIX Some ports may have issues with this aspect ratio. Results will vary from port to port. Powkiddy RK2023 Powkiddy 640x480 ArkOS, ROCKNIX Powkiddy X55 Powkiddy 1280x720 ROCKNIX R33S Retro Handheld Game Console 640x480 AmberELEC, ArkOS, ROCKNIX R35S Retro Handheld Game Console 640x480 AmberELEC, ArkOS, ROCKNIX R36S Retro Handheld Game Console 640x480 AmberELEC, ArkOS, ROCKNIX Retroid Pocket 5 Retroid Pocket 1920x1080 Batocera, ROCKNIX Some ports may have issues with this aspect ratio. Results will vary from port to port. Retroid Pocket Mini Retroid Pocket 1280x960 Batocera, ROCKNIX Some ports may have issues with this aspect ratio. Results will vary from port to port. SteamDeck Valve 1280x800 Batocera, RetroDECK Some ports may have issues with this aspect ratio. Results will vary from port to port. TrimUI Brick TrimUI 1024x768 KNULLI, TrimUI Some ports may have issues with this aspect ratio. Results will vary from port to port. TrimUI Smart Pro TrimUI 1280x720 KNULLI, TrimUI XU10 Retro Handheld MagicX 640x480 AmberELEC, ArkOS, ROCKNIX"},{"location":"news/","title":"Posts","text":""},{"location":"news/2025/04/21/tada-1000-ports-tada/","title":"1,000 PORTS","text":"<p>We\u2019ve just hit a major milestone \u2014 over 1,000 ports are now available through PortMaster! We want to take a moment to thank everyone who helped us get here.</p> <p>Whether you\u2019ve been testing builds, sharing feedback, porting games, or simply enjoying what the community has created \u2014 you\u2019ve been part of something special.</p> <p>A huge thank you to all our Crew , Port Engineers , and Port Cadets . You\u2019re the backbone of this project. Your creativity, patience, and persistence have brought so many games to life on new hardware.</p> <p>This isn\u2019t just a celebration of what we\u2019ve done \u2014 it\u2019s a reminder of what\u2019s still ahead. Big things are coming, and we\u2019re already looking toward the next 1,000.</p> <p>Thanks for being here with us.</p> <p>We\u2019ve put together a video to mark the moment \u2014 check it out everyone!</p>"},{"location":"news/2023/09/19/giddy-for-godot/","title":"Giddy For Godot!","text":"<p>tabreturn has been busy porting a gigantic group of Godot games.</p> <p>Newly added to the list are:</p> <ul> <li>Burst </li> <li>Donut Dodo </li> <li>DROID7 </li> <li>Gumgem </li> <li>HELP! NO BRAKE </li> <li>Hyper Jump </li> <li>Murtop </li> <li>Starboy </li> <li>Thwack </li> </ul> <p>phew! What a great group of games.</p> <p>Head over to tabreturn's PortMaster profile and check them out.</p>"},{"location":"news/2023/11/05/introducing-the-new-portmaster/","title":"Introducing the New PortMaster","text":"<p>We are thrilled to announce the launch of the new PortMaster, a complete overhaul of our port management program designed to provide you with an exceptional experience when installing, updating, and uninstalling Ports on your handheld Linux devices.</p> <p>The original PortMaster was built around the limited bash command <code>dialog</code>, but now, we're introducing a game-changing solution with a multitude of new features and improvements that we think you'll love!</p> <p>We are thrilled to unveil the all-new PortMaster, a game-changing program designed to streamline the management of Ports on your handheld Linux devices. Our revamped PortMaster is set to redefine your experience with its innovative features and improvements. Say goodbye to the limitations of the old version built upon a text-based user interface.</p>"},{"location":"news/2023/11/05/introducing-the-new-portmaster/#new-features-unleash-the-power-of-portmaster","title":"New Features: Unleash the Power of PortMaster","text":"<p>With the new and improved PortMaster, you can expect a world of enhancements and cutting-edge capabilities at your fingertips. Here's a glimpse of what's in store:</p>"},{"location":"news/2023/11/05/introducing-the-new-portmaster/#custom-gui-with-python-sdl2-bindings","title":"Custom GUI with Python SDL2 Bindings","text":"<p>PortMaster now boasts a completely custom graphical user interface built using Python SDL2 bindings, providing an intuitive and user-friendly experience.</p>"},{"location":"news/2023/11/05/introducing-the-new-portmaster/#compact-and-lightweight","title":"Compact and Lightweight","text":"<p>PortMaster is incredibly efficient, with a download size of just 8MB. Say goodbye to bulky software that eats up your device's storage.</p>"},{"location":"news/2023/11/05/introducing-the-new-portmaster/#port-previews","title":"Port Previews","text":"<p>Discover Ports like never before with our new port preview feature. Get a sneak peek of what's in store, making it easier to choose the perfect Ports for your device.</p>"},{"location":"news/2023/11/05/introducing-the-new-portmaster/#cancellable-downloads","title":"Cancellable Downloads","text":"<p>Ever accidentally started a massive download? No worries! PortMaster allows you to cancel downloads, so you can avoid wasting time and data on unwanted files.</p>"},{"location":"news/2023/11/05/introducing-the-new-portmaster/#enhanced-port-management","title":"Enhanced Port Management","text":"<p>Filter Ports by genre, runtime, update availability, and installation status, and sort them by name, recent additions, or recent updates for a more organized experience.</p>"},{"location":"news/2023/11/05/introducing-the-new-portmaster/#localization-support","title":"Localization Support","text":"<p>PortMaster is available in multiple languages, including English, Italian, French, German, and Polish. We welcome contributions from translators to make it even more accessible to users around the world. Contributions can be made through our Crowdin.</p>"},{"location":"news/2023/11/05/introducing-the-new-portmaster/#runtime-manager","title":"Runtime Manager","text":"<p>Manage runtimes seamlessly within PortMaster. You can install, update, verify, and uninstall runtimes directly through the program.</p>"},{"location":"news/2023/11/05/introducing-the-new-portmaster/#introducing-portmaster-themes","title":"Introducing PortMaster Themes","text":"<p>PortMaster now supports customizable themes. With multiple color schemes for dark mode, light mode, and unique color variations, you can tailor the program to your preferences. We even have a built-in theme downloader for your convenience.</p> <p>Our initial theme lineup includes:</p> <ul> <li>Default Theme: Available in both light and dark modes.</li> <li>Zelda: Inspired by the aesthetics of The Legend of Zelda: A Link to the Past.</li> <li>FF VII: A visually stunning theme inspired by Final Fantasy VII.</li> <li>Basic Theme: A minimalist theme, perfect for those who want to design their own.</li> </ul>"},{"location":"news/2023/11/05/introducing-the-new-portmaster/#new-portmaster-installer","title":"New PortMaster Installer","text":"<p>We have simplified the installation process with a self-contained PortMaster installer, which is itself a basic port. This installer will self-extract and place all the necessary files in the right locations to ensure a hassle-free installation on any known Custom Firmware (CFW). Installing PortMaster is now a straightforward two-step process, and it also includes fixes for JELOS and its version of PortMaster.</p>"},{"location":"news/2023/11/05/introducing-the-new-portmaster/#brand-new-website-and-wiki","title":"Brand New Website and Wiki","text":"<p>We've been hard at work building a brand new website for PortMaster at https://portmaster.games/. This site includes an extensive wiki with screenshots for each port, updated documentation, and tools to assist in creating new Ports.</p>"},{"location":"news/2023/11/05/introducing-the-new-portmaster/#join-the-portmaster-discord-community","title":"Join the PortMaster Discord Community","text":"<p>We've also launched a dedicated PortMaster Discord community. It has become a bustling hub for port enthusiasts, where you can stay updated on the latest port developments, seek assistance with ports, get help with PortMaster-related issues, or even collaborate and receive feedback on creating your own ports. Join our Discord community today.</p>"},{"location":"news/2023/11/05/introducing-the-new-portmaster/#under-the-hood-improvements","title":"Under the Hood Improvements","text":"<p>We've made significant enhancements under the hood. Say goodbye to the manual editing of <code>ports.md</code>; it has been replaced by the more advanced <code>ports.json</code> format. This format provides a wealth of information for each port and is now generated automatically by the ports themselves. We've even developed a tool that automates the creation of the <code>port.json</code> file for your convenience.</p>"},{"location":"news/2023/11/05/introducing-the-new-portmaster/#how-to-get-it","title":"How to Get It?","text":"<p>For ArkOS, AmberELEC, and uOS, simply run PortMaster on your device if it's already installed, and it will automatically update to the latest version. Otherwise, you will need to follow the instructions from https://portmaster.games/installation.html.</p>"},{"location":"news/2023/10/25/portober-fest/","title":"Portober Fest","text":"<p>mattyj513 has been consistently pumping out ports this month.</p> <p>Among his recent additions to PortMaster are:</p> <ul> <li>Neon City Riders </li> <li>Spinch </li> <li>The hit indie game Nuclear Throne, ported to mobile</li> </ul> <p>Head over to his PortMaster profile to check out all his ports, and drop by the #testing-n-dev channel on the PortMaster Discord to see what other projects he's working on.</p>"},{"location":"news/2023/08/26/portmaster-gui-beta/","title":"PortMaster GUI Beta","text":"<p>PortMaster is a convenient script designed to facilitate the downloading and installation of ports for handheld devices. As the number of available ports has increased, the original interface has become progressively cumbersome. For the past few months, we have been developing a new GUI.</p> <p>We are delighted to present the first public beta of the new PortMaster GUI.</p>"},{"location":"news/2023/08/26/portmaster-gui-beta/#features","title":"Features","text":"<ul> <li>Completely custom GUI using Python SDL2 bindings  </li> <li>Small size \u2014 only 3.8 MB!  </li> <li>Port previews \u2014 showcase the ports in style  </li> <li>Cancellable downloads \u2014 accidentally started a 300 MB download? Cancel it!  </li> <li>Filter ports by genre, porter, or runtime  </li> <li>Localizations \u2014 currently available in:</li> <li>English  </li> <li>Italian  </li> <li>French  </li> <li>German   Translators welcome!  </li> <li>Themes \u2014 fully customizable thanks to the custom GUI:</li> <li>Default Theme: Light mode and Dark mode  </li> <li>Zelda: LTTP Inspired theme  </li> <li>FF VII: A beautifully crafted Final Fantasy VII theme  </li> <li>Basic Theme: A barebones theme to help you start designing your own  </li> <li>Colour Schemes \u2014 themes can support multiple schemes (e.g., light/dark modes, alternative palettes)  </li> <li>Built-in theme downloader </li> </ul>"},{"location":"news/2023/08/26/portmaster-gui-beta/#nerdy-features","title":"Nerdy Features","text":"<ul> <li>Custom Sources \u2014 want to control your own ports repository? No worries!  </li> <li>Platform Hooks \u2014 running PortMaster on Raspberry Pi? Let's gooooo.  </li> </ul>"},{"location":"news/2023/08/26/portmaster-gui-beta/#installation","title":"Installation","text":"<p>Check out the installation instructions.</p>"},{"location":"tools/markdown-generator/","title":"Markdown Generator","text":"Markdown Generator Test Markdown Generator Test <p>This tool will generate port markdowns, needs a proper clean up. </p> 1. Notes 2. Controls Button Action <p>Add Row</p> 3. Output <p> [Generate Markdown] [Download Markdown] </p>"},{"location":"news/archive/2025/","title":"2025","text":""},{"location":"news/archive/2023/","title":"2023","text":""}]}